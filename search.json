[{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://kim0sun.github.io/slca/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://kim0sun.github.io/slca/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Youngsun Kim. Author, maintainer. Hwan Chung. Author.","code":""},{"path":"https://kim0sun.github.io/slca/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kim Y, Chung H (2024). slca: Structural Modeling Multiple Latent Class Variables. R package version 1.0.0, https://CRAN.R-project.org/package=slca.","code":"@Manual{slca-package,   title = {slca: Structural Modeling for Multiple Latent Class Variables},   author = {Youngsun Kim and Hwan Chung},   year = {2024},   note = {R package version 1.0.0},   url = {https://CRAN.R-project.org/package=slca}, }"},{"path":"https://kim0sun.github.io/slca/index.html","id":"slca-","dir":"","previous_headings":"","what":"Structural Modeling for Multiple Latent Class Variables","title":"Structural Modeling for Multiple Latent Class Variables","text":"slca provides comprehensive tools implementation Structural Latent Class Models (SLCM), including Latent Transition Analysis (LTA; Linda M. Collins Stephanie T. Lanza, 2009) doi:10.1002/9780470567333, Latent Class Profile Analysis (LCPA; Hwan Chung et al., 2010) doi:10.1111/j.1467-985x.2010.00674.x, Joint Latent Class Analysis (JLCA; Saebom Jeon et al., 2017) doi:10.1080/10705511.2017.1340844, extended models involving multiple latent class variables.","code":""},{"path":"https://kim0sun.github.io/slca/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Structural Modeling for Multiple Latent Class Variables","text":"can install released version slca CRAN : development version GitHub :","code":"install.packages(\"slca\") # install.packages(\"devtools\") devtools::install_github(\"kim0sun/slca\")"},{"path":"https://kim0sun.github.io/slca/index.html","id":"syntax","dir":"","previous_headings":"","what":"Syntax","title":"Structural Modeling for Multiple Latent Class Variables","text":"function serves starting point model specification. primary function crucial forming foundational structure analysis, enabling deep understanding intricate latent structures within dataset. syntax organized two main segments: measurement model specification structural model specification. logical arrangement enhances clarity efficacy model development process.","code":"slca(x, ..., constraints = NULL)"},{"path":"https://kim0sun.github.io/slca/index.html","id":"measurement-model-specification","dir":"","previous_headings":"Syntax","what":"Measurement model specification","title":"Structural Modeling for Multiple Latent Class Variables","text":", delve heart model defining latent class variables. essentially unobserved variables inferred manifest indicators (observable variables). latent class variable represented alongside number classes, denoted either parentheses brackets. instance, might define three classes latent class variable L1 L1(3). Following syntax describes three latent class variables three classes measured x, y, z.","code":"L1(3) ~ x1 + x2 + x3 L2[3] ~ y1 + y2 + y3 L3(3) ~ z1 + z2 + z3"},{"path":"https://kim0sun.github.io/slca/index.html","id":"structural-model-specification","dir":"","previous_headings":"Syntax > Measurement model specification","what":"Structural model specification","title":"Structural Modeling for Multiple Latent Class Variables","text":"part focuses establishing relationships different latent class variables. example, L1 ~ L2 indicates relationship L1 impact related L2, shown :  cases, might need define higher-level latent class variables influenced comprise several latent class variables. example, higher-level variable P composite L1, L2, L3. , note define number latent classes P. relationship can represented follows:","code":"L1 ~ L2 P[4] ~ L1 + L2 + L3"},{"path":"https://kim0sun.github.io/slca/index.html","id":"parameter-constraints","dir":"","previous_headings":"Syntax > Measurement model specification","what":"Parameter constraints","title":"Structural Modeling for Multiple Latent Class Variables","text":"critical aspect model specification ensuring measurement invariance. concept refers idea latent construct measured across different groups time points. slca, can assume measurement invariance setting constraints latent class variables. constraints argument used specify latent class variables measured homogeneous manner. feature crucial comparative studies need ensure measurement properties constructs consistent across different sub-groups time. model needs constrained transition probabilities homogeneous, can use ~ -> represent relationships want indicate, follows:","code":"slca(L1[3] ~ x11 + x21 + x31,       L2[3] ~ x12 + x22 + x32,       L3[3] ~ x13 + x23 + x33,      P[3] ~ L1 + L2 + L3,       constraints = c(\"L1\", \"L2\", \"L3\")) slca(L1[3] ~ x11 + x21 + x31,       L2[3] ~ x12 + x22 + x32,       L3[3] ~ x13 + x23 + x33,      constraints = c(\"L1 ~ L2\", \"L2 -> L3\"))"},{"path":"https://kim0sun.github.io/slca/index.html","id":"model-examples","dir":"","previous_headings":"","what":"Model Examples","title":"Structural Modeling for Multiple Latent Class Variables","text":"","code":"library(slca) lta <- slca(L1[3] ~ x1 + y1 + z1, L2[3] ~ x2 + y2 + z2, L3[3] ~ x3 + y3 + z3,             L1 ~ L2, L2 ~ L3, constraints = c(\"L1\", \"L2\", \"L3\")) plot(lta) jlca <- slca(L1[3] ~ x1 + x2 + x3, L2[3] ~ y1 + y2 + y3, L3[3] ~ z1 + z2 + z3,              JC[3] ~ L1 + L2 + L3) plot(jlca) lcamg <- slca(L1[3] ~ x1 + x2 + x3, L2[3] ~ y1 + y2 + y3, L3[3] ~ z1 + z2 + z3,               JC[3] ~ L1 + L2 + L3, LG[3] ~ g1 + g2 + g3,                LG ~ JC) plot(lcamg)"},{"path":"https://kim0sun.github.io/slca/reference/addhealth.html","id":null,"dir":"Reference","previous_headings":"","what":"Adolescent Depression Data from the Add Health Study — addhealth","title":"Adolescent Depression Data from the Add Health Study — addhealth","text":"dataset contains responses National Longitudinal Study Adolescent Health (Add Health), focusing adolescents' experiences depression. subjects, Grades 10 11 1994–1995 academic year, provided data least one measure adolescent delinquency Wave .  data can used replicate latent class analysis conducted Collins Lanza (2009). dataset includes five covariates, notably grade level sex respondents, along variables capturing depressive emotions: sadness (S1-S4), feeling disliked (D1-D2), feelings failure (F1-F2).  Responses variables initially categorized \"Never,\" \"Sometimes,\" \"Often,\" \"Time.\" dataset, responses recoded \"\" \"Never\" \"Yes\" responses, providing  longitudinal perspective adolescent depression across Waves II. Variables suffix \"w1\" Wave , suffix \"w2\" Wave II.","code":""},{"path":"https://kim0sun.github.io/slca/reference/addhealth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adolescent Depression Data from the Add Health Study — addhealth","text":"","code":"addhealth"},{"path":"https://kim0sun.github.io/slca/reference/addhealth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adolescent Depression Data from the Add Health Study — addhealth","text":"data frame 2061 rows 18 variables: GRADE Respondent's grade level Wave . SEX Respondent's sex  levels: (1)Male, (2)Female. S1w1, S1w2 felt shake blues even help family friends. S2w1, S2w2 felt depressed. S3w1, S3w2 felt lonely. S4w1, S4w2 felt sad. D1w1, D1w2 People unfriendly . D2w1, D2w2 felt people disliked F1w1, F1w2 thought life failure. F2w1, F2w2 felt life worth living","code":""},{"path":"https://kim0sun.github.io/slca/reference/addhealth.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Adolescent Depression Data from the Add Health Study — addhealth","text":"https://addhealth.cpc.unc.edu/data/#public-use","code":""},{"path":"https://kim0sun.github.io/slca/reference/addhealth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adolescent Depression Data from the Add Health Study — addhealth","text":"Collins, L.M., & Lanza, S.T. (2009). Latent Class Latent Transition Analysis: Applications Social, Behavioral, Health Sciences. J.R. Udry. National Longitudinal Study Adolescent Health (Add Health), Waves & II, 1994-1996. Carolina Population Center, University North Carolina Chapel Hill, Chapel Hill, NC, 2003.","code":""},{"path":"https://kim0sun.github.io/slca/reference/addhealth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adolescent Depression Data from the Add Health Study — addhealth","text":"","code":"library(magrittr) data <- addhealth[1:300,] lta5 <- slca(    DEP1(5) ~ S1w1 + S2w1 + S3w1 + S4w1 + D1w1 + D2w1 + F1w1 + F2w1,    DEP2(5) ~ S1w2 + S2w2 + S3w2 + S4w2 + D1w2 + D2w2 + F1w2 + F2w2,    DEP1 ~ DEP2 ) %>% estimate(data, control = list(em.tol = 1e-6)) lta5inv <- slca(    DEP1(5) ~ S1w1 + S2w1 + S3w1 + S4w1 + D1w1 + D2w1 + F1w1 + F2w1,    DEP2(5) ~ S1w2 + S2w2 + S3w2 + S4w2 + D1w2 + D2w2 + F1w2 + F2w2,    DEP1 ~ DEP2,    constraints = c(\"DEP1\", \"DEP2\") ) %>% estimate(data, control = list(em.tol = 1e-6))  compare(lta5inv, lta5, test = \"chisq\") #> Analysis of Relative Model Fit #>  #> Model H0: lta5inv #> Model H1: lta5 #>          Df  logLik    AIC    BIC   Gsq Res. Df Pr(>Chi) #> lta5inv  64 -2093.8 4315.5 4552.5                        #> lta5    104 -2071.6 4351.1 4736.3 44.41      40   0.2912 lta5inv %>% param() #> PI : #> (DEP1) #>   class #>          1       2       3       4       5 #>     0.2297  0.0866  0.1876  0.3586  0.1375 #>  #> TAU : #> (A) #>      parent #> child       1       2       3       4       5 #>     1  0.3667  0.0469  0.0247  0.0696  0.1375 #>     2  0.2153  0.6219  0.0989  0.0826  0.2221 #>     3  0.1663  0.1618  0.3982  0.0430  0.0489 #>     4  0.1561  0.0950  0.4002  0.8048  0.0318 #>     5  0.0956  0.0743  0.0780  0.0000  0.5598 #>             #> parent DEP1 #> child  DEP2 #>  #> RHO : #> (a) #>         class #> response       1       2       3       4       5 #>    1(V1)  0.1077  0.7118  0.4545  0.0072  0.7910 #>    2      0.8923  0.2882  0.5455  0.9928  0.2090 #>    1(V2)  0.2737  0.7713  0.5775  0.0464  0.8841 #>    2      0.7263  0.2287  0.4225  0.9536  0.1159 #>    1(V3)  0.2667  0.8527  0.4474  0.0540  0.7695 #>    2      0.7333  0.1473  0.5526  0.9460  0.2305 #>    1(V4)  0.3684  0.9806  0.6849  0.0818  0.9055 #>    2      0.6316  0.0194  0.3151  0.9182  0.0945 #>    1(V5)  0.6926  0.7026  0.0000  0.1013  0.5665 #>    2      0.3074  0.2974  1.0000  0.8987  0.4335 #>    1(V6)  0.6615  0.7040  0.0000  0.0145  0.7763 #>    2      0.3385  0.2960  1.0000  0.9855  0.2237 #>    1(V7)  0.1198  0.1311  0.1313  0.0054  0.7544 #>    2      0.8802  0.8689  0.8687  0.9946  0.2456 #>    1(V8)  0.1291  0.0000  0.0370  0.0000  0.5783 #>    2      0.8709  1.0000  0.9630  1.0000  0.4217 #>  #>      V1   V2   V3   V4   V5   V6   V7   V8   #> DEP1 S1w1 S2w1 S3w1 S4w1 D1w1 D2w1 F1w1 F2w1 #> DEP2 S1w2 S2w2 S3w2 S4w2 D1w2 D2w2 F1w2 F2w2"},{"path":"https://kim0sun.github.io/slca/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Two Fitted slca Models — compare","title":"Compare Two Fitted slca Models — compare","text":"Conducts relative model fit test two fitted SLCM models using deviance statistic.","code":""},{"path":"https://kim0sun.github.io/slca/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Two Fitted slca Models — compare","text":"","code":"compare(   model1,   model2,   test = c(\"none\", \"chisq\", \"boot\"),   nboot = 50,   method = c(\"hybrid\", \"em\", \"nlm\"),   plot = FALSE,   maxiter = 1000,   tol = 1e-08,   verbose = FALSE )"},{"path":"https://kim0sun.github.io/slca/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Two Fitted slca Models — compare","text":"model1 object class slcafit. model2 another object class slcafit compared model1. test character string specifying type test conducted. \"chisq\", chi-squared test conducted. \"boot\", bootstrap test conducted. nboot integer specifying number bootstrap iterations perform (used test = \"boot\"). default 100. method character string specifying estimation method bootstrapping. plot logical value indicating whether display histogram G-squared statistics bootstrap samples (applicable test = \"boot\"). default FALSE. maxiter integer specifying maximum number iterations allowed bootstrap estimation round. default 100. tol numeric value setting convergence tolerance bootstrap iteration. default 1e-6. verbose logical value indicating whether print progress updates completed bootstrap iterations. default FALSE.","code":""},{"path":"https://kim0sun.github.io/slca/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Two Fitted slca Models — compare","text":"data.frame containing number parameters (Df), loglikelihood, AIC, BIC, G-squared statistics, residual degree freedom object. statistical test conducted (via test), resulting p-value comparison also included.","code":""},{"path":[]},{"path":"https://kim0sun.github.io/slca/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Two Fitted slca Models — compare","text":"","code":"library(magrittr) data <- gss7677[gss7677$COHORT == \"YOUNG\", ] stat2 <- slca(status(2) ~ PAPRES + PADEG + MADEG) %>%    estimate(data = data, control = list(verbose = FALSE)) stat3 <- slca(status(3) ~ PAPRES + PADEG + MADEG) %>%    estimate(data = data, control = list(verbose = FALSE)) stat4 <- slca(status(4) ~ PAPRES + PADEG + MADEG) %>%    estimate(data = data, control = list(verbose = FALSE))  gof(stat2, stat3, stat4) #> Analysis of Goodness of Fit Table #>  #>       Df  logLik    AIC    BIC     Gsq Res. Df #> stat2 21 -1179.2 2400.4 2489.5 115.979      53 #> stat3 32 -1139.3 2342.6 2478.5  36.204      42 #> stat4 43 -1135.4 2356.8 2539.4  28.423      31 gof(stat2, stat3, stat4, test = \"chisq\") #> Analysis of Goodness of Fit Table #>  #>       Df  logLik    AIC    BIC     Gsq Res. Df Pr(>Chi)     #> stat2 21 -1179.2 2400.4 2489.5 115.979      53 1.34e-06 *** #> stat3 32 -1139.3 2342.6 2478.5  36.204      42   0.7226     #> stat4 43 -1135.4 2356.8 2539.4  28.423      31   0.5993     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 # \\donttest{ gof(stat2, stat3, stat4, test = \"boot\") #> Analysis of Goodness of Fit Table #>  #>       Df  logLik    AIC    BIC     Gsq Res. Df Pr(Boot)     #> stat2 21 -1179.2 2400.4 2489.5 115.979      53   <2e-16 *** #> stat3 32 -1139.3 2342.6 2478.5  36.204      42     0.21     #> stat4 43 -1135.4 2356.8 2539.4  28.423      31     0.45     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 # }  compare(stat3, stat4) #> Analysis of Relative Model Fit #>  #> Model H0: stat3 #> Model H1: stat4 #>       Df  logLik    AIC    BIC    Gsq Res. Df #> stat3 32 -1139.3 2342.6 2478.5                #> stat4 43 -1135.4 2356.8 2539.4 7.7805      11 compare(stat3, stat4, test = \"chisq\") #> Analysis of Relative Model Fit #>  #> Model H0: stat3 #> Model H1: stat4 #>       Df  logLik    AIC    BIC    Gsq Res. Df Pr(>Chi) #> stat3 32 -1139.3 2342.6 2478.5                         #> stat4 43 -1135.4 2356.8 2539.4 7.7805      11   0.7328 # \\donttest{ compare(stat3, stat4, test = \"boot\") #> Analysis of Relative Model Fit #>  #> Model H0: stat3 #> Model H1: stat4 #>       Df  logLik    AIC    BIC    Gsq Res. Df Pr(Boot) #> stat3 32 -1139.3 2342.6 2478.5                         #> stat4 43 -1135.4 2356.8 2539.4 7.7805      11     0.12 # }"},{"path":"https://kim0sun.github.io/slca/reference/confint.slcafit.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for Model Parameters — confint.slcafit","title":"Confidence Intervals for Model Parameters — confint.slcafit","text":"Computes confidence intervals one parameters fitted model.","code":""},{"path":"https://kim0sun.github.io/slca/reference/confint.slcafit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for Model Parameters — confint.slcafit","text":"","code":"# S3 method for class 'slcafit' confint(object, parm, level = 0.95, type = c(\"param\", \"logit\"), ...)"},{"path":"https://kim0sun.github.io/slca/reference/confint.slcafit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for Model Parameters — confint.slcafit","text":"object object class slcafit. parm integer string specifying parameters confidence intervals computed. level numeric value representing confidence level intervals. default 0.95 (95% confidence level). type character string specifying format results returned. Options include \"probs\" probability format \"logit\" log-odds (logit) format, default \"probs\". ... additional arguments.","code":""},{"path":"https://kim0sun.github.io/slca/reference/confint.slcafit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for Model Parameters — confint.slcafit","text":"matrix two columns representing confidence intervals selected parameters. column names correspond specified confidence level: 100 * (level / 2)%: lower bound confidence interval. 100 * (1 - level / 2)%: upper bound confidence interval. level argument determines confidence level, common values 0.95 95% confidence interval 0.99 99% confidence interval.","code":""},{"path":"https://kim0sun.github.io/slca/reference/confint.slcafit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for Model Parameters — confint.slcafit","text":"","code":"param(nlsy_jlcpa, index = TRUE) #> PI : #> (PROF) #>   class #>              1           2           3           4 #>     0.2790 (1)  0.2146 (2)  0.2869 (3)  0.2195 (4) #>  #> TAU : #> (A) #>      parent #> child           1            2            3            4 #>     1  0.0000 (5)  0.0000 (10)  0.1745 (15)  0.0000 (20) #>     2  0.0901 (6)  0.4456 (11)  0.1939 (16)  0.0403 (21) #>     3  0.3771 (7)  0.1675 (12)  0.1825 (17)  0.7018 (22) #>     4  0.2620 (8)  0.0000 (13)  0.0000 (18)  0.0813 (23) #>     5  0.2709 (9)  0.3869 (14)  0.4491 (19)  0.1766 (24) #>               #> parent PROF   #> child  SUB_98 #> (B) #>      parent #> child            1            2            3            4 #>     1  0.0000 (25)  0.0114 (30)  0.8719 (35)  0.0000 (40) #>     2  0.0000 (26)  0.9617 (31)  0.0000 (36)  0.0079 (41) #>     3  0.0000 (27)  0.0000 (32)  0.0965 (37)  0.9210 (42) #>     4  0.9941 (28)  0.0000 (33)  0.0000 (38)  0.0711 (43) #>     5  0.0059 (29)  0.0269 (34)  0.0316 (39)  0.0000 (44) #>               #> parent PROF   #> child  SUB_03 #> (C) #>      parent #> child            1            2            3            4 #>     1  0.0019 (45)  0.1821 (50)  0.8024 (55)  0.0319 (60) #>     2  0.0097 (46)  0.7202 (51)  0.0000 (56)  0.0000 (61) #>     3  0.0573 (47)  0.0442 (52)  0.1844 (57)  0.7168 (62) #>     4  0.9311 (48)  0.0356 (53)  0.0084 (58)  0.2473 (63) #>     5  0.0000 (49)  0.0179 (54)  0.0048 (59)  0.0040 (64) #>               #> parent PROF   #> child  SUB_08 #> (D) #>      parent #> child            1            2            3            4            5 #>     1  0.0254 (65)  0.0457 (68)  0.9505 (71)  0.7958 (74)  0.1613 (77) #>     2  0.7516 (66)  0.6690 (69)  0.0051 (72)  0.0000 (75)  0.1631 (78) #>     3  0.2230 (67)  0.2853 (70)  0.0444 (73)  0.2042 (76)  0.6755 (79) #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  SMK_98 SMK_03 SMK_08 #> (E) #>      parent #> child            1            2            3            4            5 #>     1  0.5664 (80)  0.8533 (83)  0.0335 (86)  0.7521 (89)  0.2872 (92) #>     2  0.2229 (81)  0.1264 (84)  0.2589 (87)  0.2414 (90)  0.6127 (93) #>     3  0.2107 (82)  0.0203 (85)  0.7075 (88)  0.0065 (91)  0.1001 (94) #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  DRK_98 DRK_03 DRK_08 #> (F) #>      parent #> child            1             2             3             4             5 #>     1  0.0871 (95)   0.1442 (98)  0.0317 (101)  0.1525 (104)  0.7278 (107) #>     2  0.0617 (96)   0.8387 (99)  0.0095 (102)  0.2302 (105)  0.1258 (108) #>     3  0.8512 (97)  0.0170 (100)  0.9588 (103)  0.6173 (106)  0.1463 (109) #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  MRJ_98 MRJ_03 MRJ_08 #>  #> RHO : #> (a) #>         class #> response             1             2             3 #>    1(V1)  0.0134 (110)  1.0000 (118)  1.0000 (126) #>    2      0.9866 (111)  0.0000 (119)  0.0000 (127) #>    1(V2)  0.0000 (112)  1.0000 (120)  0.6701 (128) #>    2      1.0000 (113)  0.0000 (121)  0.3299 (129) #>    1(V3)  0.0000 (114)  0.8833 (122)  0.0000 (130) #>    2      1.0000 (115)  0.1167 (123)  1.0000 (131) #>    1(V4)  0.0000 (116)  0.6460 (124)  0.0000 (132) #>    2      1.0000 (117)  0.3540 (125)  1.0000 (133) #>  #>        V1      V2      V3      V4      #> SMK_98 ESMK_98 FSMK_98 DSMK_98 HSMK_98 #> SMK_03 ESMK_03 FSMK_03 DSMK_03 HSMK_03 #> SMK_08 ESMK_08 FSMK_08 DSMK_08 HSMK_08 #> (b) #>         class #> response             1             2             3 #>    1(V1)  1.0000 (134)  1.0000 (142)  0.0759 (150) #>    2      0.0000 (135)  0.0000 (143)  0.9241 (151) #>    1(V2)  1.0000 (136)  0.5760 (144)  0.0000 (152) #>    2      0.0000 (137)  0.4240 (145)  1.0000 (153) #>    1(V3)  0.6934 (138)  0.0000 (146)  0.0000 (154) #>    2      0.3066 (139)  1.0000 (147)  1.0000 (155) #>    1(V4)  0.8061 (140)  0.0000 (148)  0.0000 (156) #>    2      0.1939 (141)  1.0000 (149)  1.0000 (157) #>  #>        V1      V2      V3      V4      #> DRK_98 EDRK_98 CDRK_98 WDRK_98 BDRK_98 #> DRK_03 EDRK_03 CDRK_03 WDRK_03 BDRK_03 #> DRK_08 EDRK_08 CDRK_08 WDRK_08 BDRK_08 #> (c) #>         class #> response             1             2             3 #>    1(V1)  0.5189 (158)  1.0000 (166)  0.0002 (174) #>    2      0.4811 (159)  0.0000 (167)  0.9998 (175) #>    1(V2)  0.0000 (160)  1.0000 (168)  0.0000 (176) #>    2      1.0000 (161)  0.0000 (169)  1.0000 (177) #>    1(V3)  0.0000 (162)  0.5259 (170)  0.0000 (178) #>    2      1.0000 (163)  0.4741 (171)  1.0000 (179) #>    1(V4)  0.0000 (164)  0.3720 (172)  0.0000 (180) #>    2      1.0000 (165)  0.6280 (173)  1.0000 (181) #>  #>        V1      V2      V3      V4      #> MRJ_98 EMRJ_98 CMRJ_98 OMRJ_98 SMRJ_98 #> MRJ_03 EMRJ_03 CMRJ_03 OMRJ_03 SMRJ_03 #> MRJ_08 EMRJ_08 CMRJ_08 OMRJ_08 SMRJ_08 confint(nlsy_jlcpa) #>               2.5 %        97.5 % #> (1)    2.375946e-01  3.189674e-01 #> (2)    2.007809e-01  2.232185e-01 #> (3)    2.694779e-01  2.972918e-01 #> (4)    2.921466e-01  1.605223e-01 #> (5)   3.225019e-147 1.301357e-147 #> (6)    5.617668e-02  1.323912e-01 #> (7)    3.342859e-01  3.900330e-01 #> (8)    2.011686e-01  3.127912e-01 #> (9)    4.083688e-01  1.647846e-01 #> (10)   1.405540e-17  7.178229e-18 #> (11)   3.571926e-01  5.169822e-01 #> (12)   1.206630e-01  2.163536e-01 #> (13)   5.905230e-09  3.015863e-09 #> (14)   5.221444e-01  2.666642e-01 #> (15)   1.160137e-01  2.395351e-01 #> (16)   1.437584e-01  2.388426e-01 #> (17)   1.424657e-01  2.135349e-01 #> (18)   4.364059e-25  2.249242e-25 #> (19)   5.977622e-01  3.080874e-01 #> (20)   2.991425e-80  8.182306e-81 #> (21)   1.641842e-02  8.540367e-02 #> (22)   6.334481e-01  6.715708e-01 #> (23)   3.635955e-02  1.572004e-01 #> (24)   3.137739e-01  8.582514e-02 #> (25)   6.296108e-25  1.585150e-31 #> (26)   5.606658e-74  1.411570e-80 #> (27)   1.740577e-05  4.382324e-12 #> (28)   7.075207e-03  9.999998e-01 #> (29)   9.929074e-01  2.499810e-07 #> (30)   2.418619e-06  9.752161e-01 #> (31)   6.781348e-01  2.474301e-02 #> (32)  1.820277e-198 2.313017e-202 #> (33)   5.547786e-99 7.049545e-103 #> (34)   3.218627e-01  4.089894e-05 #> (35)   7.167324e-01  8.866895e-01 #> (36)   7.776363e-11  1.443907e-12 #> (37)   7.116396e-02  1.093721e-01 #> (38)   2.824285e-81  5.244104e-83 #> (39)   2.121036e-01  3.938319e-03 #> (40)   4.381807e-25  7.093169e-27 #> (41)   1.526174e-03  3.898913e-02 #> (42)   9.603969e-01  8.353983e-01 #> (43)   3.807697e-02  1.256126e-01 #> (44)   7.213316e-48  1.167675e-49 #> (45)   7.231773e-06  3.313218e-01 #> (46)   3.926489e-03  1.594934e-02 #> (47)   5.449962e-02  4.002355e-02 #> (48)   9.415667e-01  6.127054e-01 #> (49)  4.610415e-128 8.887994e-131 #> (50)   1.272757e-01  2.008492e-01 #> (51)   5.846055e-01  6.838233e-01 #> (52)   2.743692e-02  5.478871e-02 #> (53)   1.643153e-02  5.952959e-02 #> (54)   2.442503e-01  1.009236e-03 #> (55)   2.347775e-03  7.502790e-01 #> (56)   1.320936e-37  8.332838e-45 #> (57)   5.573460e-04  1.668778e-01 #> (58)   2.331151e-06  8.284316e-02 #> (59)   9.970925e-01  6.289942e-08 #> (60)   8.559811e-04  4.301559e-02 #> (61)  1.742218e-229 1.081342e-235 #> (62)   2.692763e-02  6.901381e-01 #> (63)   8.292467e-03  2.668457e-01 #> (64)   9.639239e-01  5.982781e-07 #> (65)   5.489069e-03  1.078415e-01 #> (66)   7.041832e-01  7.352459e-01 #> (67)   2.903277e-01  1.569126e-01 #> (68)   2.886795e-02  7.092989e-02 #> (69)   6.297945e-01  6.957045e-01 #> (70)   3.413375e-01  2.333657e-01 #> (71)   9.120412e-01  9.441569e-01 #> (72)   7.185928e-04  3.425526e-02 #> (73)   8.724023e-02  2.158784e-02 #> (74)   7.451601e-01  8.386085e-01 #> (75)   1.936013e-11  1.226088e-11 #> (76)   2.548399e-01  1.613915e-01 #> (77)   1.079444e-01  2.272854e-01 #> (78)   1.140801e-01  2.198554e-01 #> (79)   7.779755e-01  5.528592e-01 #> (80)   5.432810e-01  5.817225e-01 #> (81)   1.948651e-01  2.511782e-01 #> (82)   2.618540e-01  1.670994e-01 #> (83)   8.341752e-01  8.568705e-01 #> (84)   1.162206e-01  1.350051e-01 #> (85)   4.960417e-02  8.124423e-03 #> (86)   7.167025e-03  1.392989e-01 #> (87)   1.960327e-01  3.034219e-01 #> (88)   7.968002e-01  5.572792e-01 #> (89)   6.932064e-01  7.597046e-01 #> (90)   2.262974e-01  2.398108e-01 #> (91)   8.049620e-02  4.846526e-04 #> (92)   2.513875e-01  3.152499e-01 #> (93)   5.725251e-01  6.300458e-01 #> (94)   1.760875e-01  5.470427e-02 #> (95)   4.059992e-02  1.707237e-01 #> (96)   2.983669e-02  1.167917e-01 #> (97)   9.295634e-01  7.124847e-01 #> (98)   1.607779e-01  1.199931e-01 #> (99)   7.435855e-01  8.772025e-01 #> (100)  9.563661e-02  2.804361e-03 #> (101)  1.242393e-02  7.739141e-02 #> (102)  3.305878e-03  2.629612e-02 #> (103)  9.842702e-01  8.963125e-01 #> (104)  9.321312e-02  2.376499e-01 #> (105)  2.070434e-01  2.436557e-01 #> (106)  6.997435e-01  5.186944e-01 #> (107)  2.345068e-01  8.823160e-01 #> (108)  5.841169e-02  1.058530e-01 #> (109)  7.070815e-01  1.183098e-02 #> (110)  2.765600e-03  6.228101e-02 #> (111)  9.972344e-01  9.377190e-01 #> (112)  0.000000e+00  0.000000e+00 #> (113)  1.000000e+00  1.000000e+00 #> (114)  0.000000e+00  0.000000e+00 #> (115)  1.000000e+00  1.000000e+00 #> (116)  0.000000e+00  0.000000e+00 #> (117)  1.000000e+00  1.000000e+00 #> (118)  1.000000e+00  1.000000e+00 #> (119)  0.000000e+00  0.000000e+00 #> (120)  1.000000e+00  1.000000e+00 #> (121)  0.000000e+00  0.000000e+00 #> (122)  8.509914e-01  9.093172e-01 #> (123)  1.490086e-01  9.068277e-02 #> (124)  6.145998e-01  6.762846e-01 #> (125)  3.854002e-01  3.237154e-01 #> (126)  1.000000e+00  1.000000e+00 #> (127)  0.000000e+00  0.000000e+00 #> (128)  6.165459e-01  7.194874e-01 #> (129)  3.834541e-01  2.805126e-01 #> (130)  0.000000e+00  0.000000e+00 #> (131)  1.000000e+00  1.000000e+00 #> (132)  0.000000e+00  0.000000e+00 #> (133)  1.000000e+00  1.000000e+00 #> (134)  1.000000e+00  1.000000e+00 #> (135)  0.000000e+00  0.000000e+00 #> (136)  1.000000e+00  1.000000e+00 #> (137)  0.000000e+00  0.000000e+00 #> (138)  6.659175e-01  7.195506e-01 #> (139)  3.340825e-01  2.804494e-01 #> (140)  7.816957e-01  8.283861e-01 #> (141)  2.183043e-01  1.716139e-01 #> (142)  1.000000e+00  1.000000e+00 #> (143)  0.000000e+00  0.000000e+00 #> (144)  5.142454e-01  6.355153e-01 #> (145)  4.857546e-01  3.644847e-01 #> (146) 2.266886e-173 2.266886e-173 #> (147)  1.000000e+00  1.000000e+00 #> (148) 3.659486e-127 3.659486e-127 #> (149)  1.000000e+00  1.000000e+00 #> (150)  2.533073e-02  2.062544e-01 #> (151)  9.746693e-01  7.937456e-01 #> (152)  0.000000e+00  0.000000e+00 #> (153)  1.000000e+00  1.000000e+00 #> (154)  0.000000e+00  0.000000e+00 #> (155)  1.000000e+00  1.000000e+00 #> (156)  0.000000e+00  0.000000e+00 #> (157)  1.000000e+00  1.000000e+00 #> (158)  3.209799e-01  7.110619e-01 #> (159)  6.790201e-01  2.889381e-01 #> (160) 9.689486e-106 9.689486e-106 #> (161)  1.000000e+00  1.000000e+00 #> (162)  0.000000e+00  0.000000e+00 #> (163)  1.000000e+00  1.000000e+00 #> (164)  0.000000e+00  0.000000e+00 #> (165)  1.000000e+00  1.000000e+00 #> (166)  1.000000e+00  1.000000e+00 #> (167)  0.000000e+00  0.000000e+00 #> (168)  1.000000e+00  1.000000e+00 #> (169)  0.000000e+00  0.000000e+00 #> (170)  4.824858e-01  5.688752e-01 #> (171)  5.175142e-01  4.311248e-01 #> (172)  3.328567e-01  4.129556e-01 #> (173)  6.671433e-01  5.870444e-01 #> (174)  2.280080e-04  2.354544e-04 #> (175)  9.997720e-01  9.997645e-01 #> (176)  0.000000e+00  0.000000e+00 #> (177)  1.000000e+00  1.000000e+00 #> (178)  0.000000e+00  0.000000e+00 #> (179)  1.000000e+00  1.000000e+00 #> (180)  0.000000e+00  0.000000e+00 #> (181)  1.000000e+00  1.000000e+00 confint(nlsy_jlcpa, 1:4) #>         2.5 %    97.5 % #> (1) 0.2375946 0.3189674 #> (2) 0.2007809 0.2232185 #> (3) 0.2694779 0.2972918 #> (4) 0.2921466 0.1605223"},{"path":"https://kim0sun.github.io/slca/reference/estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Parameters of an slca Object — estimate","title":"Estimate Parameters of an slca Object — estimate","text":"Estimates parameters model created using slca function.","code":""},{"path":"https://kim0sun.github.io/slca/reference/estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Parameters of an slca Object — estimate","text":"","code":"estimate(x, ...)  # S3 method for class 'slca' estimate(x,    data,    method = c(\"em\", \"hybrid\", \"nlm\"),    fix2zero = NULL,    control = slcaControl(), ...)"},{"path":"https://kim0sun.github.io/slca/reference/estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Parameters of an slca Object — estimate","text":"x slca object defining slca model estimated. ... additional arguments passed estimation process. data data.frame containing observed categorical variables included model. method character string specifying estimation method SLCM parameters. default \"em\", uses expectation-maximization (EM) algorithm. alternative \"nlm\" employs Newton-Raphson algorithm via nlm function, \"hybrid\" combines approaches, starting EM finishing nlm refined estimates. fix2zero vector specifying parameters constrained zero. See 'Details' section information. control list control parameters estimation procedure. Modify default values using slcaControl().","code":""},{"path":"https://kim0sun.github.io/slca/reference/estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Parameters of an slca Object — estimate","text":"object class slcafit containing following components: model list describing model structure. method estimation method used. arg brief description model used estimation. mf data.frame used estimation. par log estimated paramters. logit log-odds estimated parameters. score score function estimated parameters. posterior list posterior probablities latent class variable. convergence logical indicator whether convergence achieved. loglikelihood loglikelihood value estimated model. control control settings used estimation process. returned object can processed using param function extract estimated parameters standard errors. regress function allows logistic regression analysis using three-step approach evaluate effects external variables latent class variables. Additionally, several methods available, including predict, reorder, gof, others.","code":""},{"path":"https://kim0sun.github.io/slca/reference/estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Parameters of an slca Object — estimate","text":"fix2zero argument allows constrain specific parameters zero. parameter associated unique index, can identified using param function argument index = TRUE. apply constraints, provide relevant parameter indices fix2zero arguments vector.","code":""},{"path":[]},{"path":"https://kim0sun.github.io/slca/reference/estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Parameters of an slca Object — estimate","text":"","code":"m <- slca(lc[3] ~ y1 + y2 + y3 + y4) pi <- rep(1 / 3, 3) rho <- c(.9, .1, .9, .1, .9, .1, .9, .1, # class 1          .9, .1, .9, .1, .1, .9, .1, .9, # class 2          .1, .9, .1, .9, .1, .9, .1, .9) # class 3 dt <- simulate(m, 200, parm = c(pi, rho)) #> Error in is.nulll(seed): could not find function \"is.nulll\" estimate(m, dt$response) #> Error in dt$response: object of type 'closure' is not subsettable  # Several estimation methods estimate(m, dt$response, method = \"em\",          control = slcaControl(verbose = TRUE)) # default #> Error in dt$response: object of type 'closure' is not subsettable estimate(m, dt$response, method = \"nlm\",          control = slcaControl(verbose = TRUE)) #> Error in dt$response: object of type 'closure' is not subsettable estimate(m, dt$response, method = \"hybrid\",          control = slcaControl(verbose = TRUE)) #> Error in dt$response: object of type 'closure' is not subsettable  # Parameter restriction mf <- estimate(m, dt$response) #> Error in dt$response: object of type 'closure' is not subsettable param(mf, index = TRUE) #> Error: object 'mf' not found mf0 <- estimate(mf, fix2zero = c(4, 6, 8, 10)) #> Error: object 'mf' not found param(mf0) #> Error: object 'mf0' not found  # Estimation control estimate(m, dt$response, control = slcaControl(nrep = 3, verbose = TRUE)) #> Error in dt$response: object of type 'closure' is not subsettable estimate(m, dt$response, control = slcaControl(init.param = c(pi, rho))) #> Error in dt$response: object of type 'closure' is not subsettable"},{"path":"https://kim0sun.github.io/slca/reference/gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness-of-Fit Test for Fitted slca Model — gof","title":"Goodness-of-Fit Test for Fitted slca Model — gof","text":"Computes AIC, BIC, deviance statistic (G-squared) assessing goodness--fit fitted slca model. test argument specified, absolute model fit can evaluated using deviance statistics.","code":""},{"path":"https://kim0sun.github.io/slca/reference/gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-Fit Test for Fitted slca Model — gof","text":"","code":"gof(object, ...)  # S3 method for class 'slcafit' gof(    object, ..., test = c(\"none\", \"chisq\", \"boot\"),    nboot = 100, plot = FALSE,    maxiter = 100, tol = 1e-6, verbose = FALSE )  # S3 method for class 'slcafit' gof(   object,   ...,   test = c(\"none\", \"chisq\", \"boot\"),   nboot = 100,   plot = FALSE,   maxiter = 100,   tol = 1e-06,   verbose = FALSE )"},{"path":"https://kim0sun.github.io/slca/reference/gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-Fit Test for Fitted slca Model — gof","text":"object object class slcafit. ... additional objects class slcafit comparison. test character string specifying type test conducted. \"chisq\", chi-squared test conducted. \"boot\", bootstrap test conducted. nboot integer specifying number bootstrap rounds performed. plot logical value indicating whether print histogram G-squared statistics boostrap samples, test = \"boot\". default FALSE. maxiter integer specifying maximum number iterations allowed estimation process bootstrap iteration. default 100. tol numeric value specifying convergence tolerance bootstrap iteration. default 1e-6. verbose logical value indicating whether print progress updates number bootstrapping rounds completed.","code":""},{"path":"https://kim0sun.github.io/slca/reference/gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness-of-Fit Test for Fitted slca Model — gof","text":"data.frame containing number parameters (Df), loglikelihood, AIC, BIC, G-squared statistics, residual degree freedom object. statistical test performed (using test), result includes corresponding p-value.","code":""},{"path":[]},{"path":"https://kim0sun.github.io/slca/reference/gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness-of-Fit Test for Fitted slca Model — gof","text":"","code":"library(magrittr) data <- gss7677[gss7677$COHORT == \"YOUNG\", ] stat2 <- slca(status(2) ~ PAPRES + PADEG + MADEG) %>%    estimate(data = data, control = list(verbose = FALSE)) stat3 <- slca(status(3) ~ PAPRES + PADEG + MADEG) %>%    estimate(data = data, control = list(verbose = FALSE)) stat4 <- slca(status(4) ~ PAPRES + PADEG + MADEG) %>%    estimate(data = data, control = list(verbose = FALSE))  gof(stat2, stat3, stat4) #> Analysis of Goodness of Fit Table #>  #>       Df  logLik    AIC    BIC     Gsq Res. Df #> stat2 21 -1179.2 2400.4 2489.5 115.979      53 #> stat3 32 -1139.3 2342.6 2478.5  36.204      42 #> stat4 43 -1135.4 2356.8 2539.4  28.423      31 gof(stat2, stat3, stat4, test = \"chisq\") #> Analysis of Goodness of Fit Table #>  #>       Df  logLik    AIC    BIC     Gsq Res. Df Pr(>Chi)     #> stat2 21 -1179.2 2400.4 2489.5 115.979      53 1.34e-06 *** #> stat3 32 -1139.3 2342.6 2478.5  36.204      42   0.7226     #> stat4 43 -1135.4 2356.8 2539.4  28.423      31   0.5993     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 # \\donttest{ gof(stat2, stat3, stat4, test = \"boot\") #> Analysis of Goodness of Fit Table #>  #>       Df  logLik    AIC    BIC     Gsq Res. Df Pr(Boot)     #> stat2 21 -1179.2 2400.4 2489.5 115.979      53   <2e-16 *** #> stat3 32 -1139.3 2342.6 2478.5  36.204      42     0.15     #> stat4 43 -1135.4 2356.8 2539.4  28.423      31     0.34     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 # }  compare(stat3, stat4) #> Analysis of Relative Model Fit #>  #> Model H0: stat3 #> Model H1: stat4 #>       Df  logLik    AIC    BIC    Gsq Res. Df #> stat3 32 -1139.3 2342.6 2478.5                #> stat4 43 -1135.4 2356.8 2539.4 7.7805      11 compare(stat3, stat4, test = \"chisq\") #> Analysis of Relative Model Fit #>  #> Model H0: stat3 #> Model H1: stat4 #>       Df  logLik    AIC    BIC    Gsq Res. Df Pr(>Chi) #> stat3 32 -1139.3 2342.6 2478.5                         #> stat4 43 -1135.4 2356.8 2539.4 7.7805      11   0.7328 # \\donttest{ compare(stat3, stat4, test = \"boot\") #> Analysis of Relative Model Fit #>  #> Model H0: stat3 #> Model H1: stat4 #>       Df  logLik    AIC    BIC    Gsq Res. Df Pr(Boot) #> stat3 32 -1139.3 2342.6 2478.5                         #> stat4 43 -1135.4 2356.8 2539.4 7.7805      11     0.24 # }"},{"path":"https://kim0sun.github.io/slca/reference/gss7677.html","id":null,"dir":"Reference","previous_headings":"","what":"GSS 1976-1977 Data on Social Status and Tolerance towards Minorities — gss7677","title":"GSS 1976-1977 Data on Social Status and Tolerance towards Minorities — gss7677","text":"dataset contains responses General Social Survey (GSS) years 1976 1977, focusing social status tolerance towards minorities. dataset can used replicate analyses conducted McCutcheon (1985) Bakk et al. (2014).  includes covariates interview year, age, sex, race, education level, income. Social status-related variables include father's occupation education level, well mother's education level. Tolerance towards minorities measured agreement three questions: (1) allowing public speaking, (2) allowing teaching, (3) allowing literature publication.","code":""},{"path":"https://kim0sun.github.io/slca/reference/gss7677.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GSS 1976-1977 Data on Social Status and Tolerance towards Minorities — gss7677","text":"","code":"gss7677"},{"path":"https://kim0sun.github.io/slca/reference/gss7677.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GSS 1976-1977 Data on Social Status and Tolerance towards Minorities — gss7677","text":"data frame 2942 rows 14 variables: YEAR Interview year (1976, 1977). COHORT Respondent's age cohort. Levels: (1) YOUNG, (2) YOUNG-MIDDLE, (4) MIDDLE, (5) OLD. SEX Respondent's sex. Levels: (1) MALE, (2) FEMALE. RACE Respondent's race. Levels: (1) WHITE, (2) BLACK, (3) . DEGREE Respondent's education level. Levels: (1) LT HS, (2) HIGH-SCH, (3) HIGHER. REALRINC Respondent's income. PAPRES Father's occupational prestige. Levels: (1) LOW, (2) MEDIUM, (3) HIGH. PADEG Father's education level. Levels: (1) LT HS, (2) HIGH-SCH, (3) COLLEGE, (4) BACHELOR, (5) GRADUATE. MADEG Mother's education level. Levels: (1) LT HS, (2) HIGH-SCH, (3) COLLEGE, (4) BACHELOR, (5) GRADUATE. TOLRAC Tolerance towards racists. TOLCOM Tolerance towards communists. TOLHOMO Tolerance towards homosexuals. TOLATH Tolerance towards atheists. TOLMIL Tolerance towards militarists.","code":""},{"path":"https://kim0sun.github.io/slca/reference/gss7677.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"GSS 1976-1977 Data on Social Status and Tolerance towards Minorities — gss7677","text":"General Social Survey (GSS) 1976, 1977","code":""},{"path":"https://kim0sun.github.io/slca/reference/gss7677.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GSS 1976-1977 Data on Social Status and Tolerance towards Minorities — gss7677","text":"Bakk Z, Kuha J. (2021) Relating latent class membership external variables: overview. Br J Math Stat Psychol. 74(2):340-362. McCutcheon, . L. (1985). latent class analysis tolerance nonconformity American public. Public Opinion Quarterly, 49, 474–488.","code":""},{"path":"https://kim0sun.github.io/slca/reference/gss7677.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GSS 1976-1977 Data on Social Status and Tolerance towards Minorities — gss7677","text":"","code":"library(magrittr) data <- gss7677[gss7677$RACE == \"BLACK\",] model_stat <- slca(status(3) ~ PAPRES + PADEG + MADEG) %>%    estimate(data = data, control = list(em.tol = 1e-6)) summary(model_stat) #> Structural Latent Class Model #>  #> Summary of model structure #>                                     #>  Number of manifest variables     3 #>  Number of latent class variables 1 #>  #>  Latent variables (Root*):                 #>   Label: status* #>  nclass: 3       #>  #>  Measurement model:                                        #>   status -> { PAPRES, PADEG, MADEG }  a #>  #>  #> Summary of manifest variables #>  #>  Categories for each variable: #>          response #>            1      2         3        4         5        #>    PAPRES  LOW    MIDIUM    HIGH                        #>    PADEG   LT-HS  HIGH-SCH  COLLEGE  BACHELOR  GRADUATE #>    MADEG   LT-HS  HIGH-SCH  COLLEGE  BACHELOR  GRADUATE #>  #>  Frequencies for each categories: #>          response #>              1    2  3  4  5  <NA> #>    PAPRES   80  114  8          85 #>    PADEG   155   27  1     2   102 #>    MADEG   183   44  4  4  1    51 #>  #>  #> Summary of model fit #>                                                                                    #>  Number of observations                                                        287 #>  Number of free parameters                                                      32 #>  Log-likelihood                                                           -387.769 #>  Information criteria                                                              #>    Akaike (AIC)                                                            839.537 #>    Bayesian (BIC)                                                          956.641 #>  Chi-squared Tests                                                                 #>    Residual degree of freedom (df)                                              42 #>    Pearson Chi-squared (X-squared) 4261234132507916734896178344545248308363264.000 #>      P(>Chi)                                                                 0.000 #>    Likelihood Ratio (G-squared)                                             31.612 #>      P(>Chi)                                                                 0.879 param(model_stat) #> PI : #> (status) #>   class #>          1       2       3 #>     0.1095  0.7684  0.1221 #>  #> RHO : #> (a) #>         class #> response       1       2       3 #>    1(V1)  0.4220  0.4526  0.0000 #>    2      0.4422  0.5474  0.7896 #>    3      0.1358  0.0000  0.2104 #>    1(V2)  0.0000  1.0000  0.5849 #>    2      0.8546  0.0000  0.4151 #>    3      0.0485  0.0000  0.0000 #>    4      0.0000  0.0000  0.0000 #>    5      0.0969  0.0000  0.0000 #>    1(V3)  0.0000  0.8642  0.9152 #>    2      0.7504  0.1358  0.0000 #>    3      0.1539  0.0000  0.0000 #>    4      0.0572  0.0000  0.0848 #>    5      0.0385  0.0000  0.0000 #>  #>        V1     V2    V3    #> status PAPRES PADEG MADEG  model_tol <- slca(tol(4) ~ TOLRAC + TOLCOM + TOLHOMO + TOLATH + TOLMIL) %>%    estimate(data = data, control = list(em.tol = 1e-6)) summary(model_tol) #> Structural Latent Class Model #>  #> Summary of model structure #>                                     #>  Number of manifest variables     5 #>  Number of latent class variables 1 #>  #>  Latent variables (Root*):              #>   Label: tol* #>  nclass: 4    #>  #>  Measurement model:                                                        #>   tol -> { TOLRAC, TOLCOM, TOLHOMO, TOLATH, TOLMIL }  a #>  #>  #> Summary of manifest variables #>  #>  Categories for each variable: #>           response #>             1         2          #>    TOLRAC   TOLERANT  INTOLERANT #>    TOLCOM   TOLERANT  INTOLERANT #>    TOLHOMO  TOLERANT  INTOLERANT #>    TOLATH   TOLERANT  INTOLERANT #>    TOLMIL   TOLERANT  INTOLERANT #>  #>  Frequencies for each categories: #>           response #>               1    2  <NA> #>    TOLRAC    64  216     7 #>    TOLCOM    83  184    20 #>    TOLHOMO  103  164    20 #>    TOLATH    67  212     8 #>    TOLMIL    74  203    10 #>  #>  #> Summary of model fit #>                                             #>  Number of observations                 287 #>  Number of free parameters               23 #>  Log-likelihood                    -644.300 #>  Information criteria                       #>    Akaike (AIC)                    1334.601 #>    Bayesian (BIC)                  1418.769 #>  Chi-squared Tests                          #>    Residual degree of freedom (df)        8 #>    Pearson Chi-squared (X-squared)    5.797 #>      P(>Chi)                          0.670 #>    Likelihood Ratio (G-squared)       6.091 #>      P(>Chi)                          0.637 param(model_tol) #> PI : #> (tol) #>   class #>          1       2       3       4 #>     0.1421  0.2216  0.5759  0.0604 #>  #> RHO : #> (a) #>         class #> response       1       2       3       4 #>    1(V1)  0.9066  0.3990  0.0000  0.1937 #>    2      0.0934  0.6010  1.0000  0.8063 #>    1(V2)  0.9644  0.3389  0.0687  1.0000 #>    2      0.0356  0.6611  0.9313  0.0000 #>    1(V3)  0.8930  0.5189  0.1331  0.9986 #>    2      0.1070  0.4811  0.8669  0.0014 #>    1(V4)  1.0000  0.4498  0.0081  0.0000 #>    2      0.0000  0.5502  0.9919  1.0000 #>    1(V5)  0.8635  0.2040  0.1088  0.6456 #>    2      0.1365  0.7960  0.8912  0.3544 #>  #>     V1     V2     V3      V4     V5     #> tol TOLRAC TOLCOM TOLHOMO TOLATH TOLMIL  model_lta <- slca(    status(3) ~ PAPRES + PADEG + MADEG,    tol(4) ~ TOLRAC + TOLCOM + TOLHOMO + TOLATH + TOLMIL,    status ~ tol ) %>% estimate(data = data, control = list(em.tol = 1e-6)) summary(model_lta) #> Structural Latent Class Model #>  #> Summary of model structure #>                                     #>  Number of manifest variables     8 #>  Number of latent class variables 2 #>  #>  Latent variables (Root*):                     #>   Label: status* tol #>  nclass: 3       4   #>  #>  Measurement model:                                                           #>   status -> { PAPRES, PADEG, MADEG }                     a #>   tol    -> { TOLRAC, TOLCOM, TOLHOMO, TOLATH, TOLMIL }  b #>  #>  Structural model:                    #>   status -> { tol } #>  #>  Dependency constraints: #>   A             #>   status -> tol #>  #>  Tree of structural model:                 #>   status  -> tol #>  #>  #> Summary of manifest variables #>  #>  Categories for each variable: #>           response #>             1         2           3        4         5        #>    PAPRES   LOW       MIDIUM      HIGH                        #>    PADEG    LT-HS     HIGH-SCH    COLLEGE  BACHELOR  GRADUATE #>    MADEG    LT-HS     HIGH-SCH    COLLEGE  BACHELOR  GRADUATE #>    TOLRAC   TOLERANT  INTOLERANT                              #>    TOLCOM   TOLERANT  INTOLERANT                              #>    TOLHOMO  TOLERANT  INTOLERANT                              #>    TOLATH   TOLERANT  INTOLERANT                              #>    TOLMIL   TOLERANT  INTOLERANT                              #>  #>  Frequencies for each categories: #>           response #>               1    2  3  4  5  <NA> #>    PAPRES    80  114  8          85 #>    PADEG    155   27  1     2   102 #>    MADEG    183   44  4  4  1    51 #>    TOLRAC    64  216              7 #>    TOLCOM    83  184             20 #>    TOLHOMO  103  164             20 #>    TOLATH    67  212              8 #>    TOLMIL    74  203             10 #>  #>  #> Summary of model fit #>                                                                                     #>  Number of observations                                                         287 #>  Number of free parameters                                                       61 #>  Log-likelihood                                                           -1021.917 #>  Information criteria                                                               #>    Akaike (AIC)                                                            2165.835 #>    Bayesian (BIC)                                                          2389.063 #>  Chi-squared Tests                                                                  #>    Residual degree of freedom (df)                                             2338 #>    Pearson Chi-squared (X-squared) 21105020238708840861072825644324182812524544.000 #>      P(>Chi)                                                                  0.000 #>    Likelihood Ratio (G-squared)                                             214.454 #>      P(>Chi)                                                                  1.000 param(model_lta) #> PI : #> (status) #>   class #>          1       2       3 #>     0.6135  0.1579  0.2286 #>  #> TAU : #> (A) #>      parent #> child       1       2       3 #>     1  0.1297  0.1522  0.5214 #>     2  0.8069  0.3610  0.1840 #>     3  0.0218  0.2582  0.0000 #>     4  0.0416  0.2286  0.2946 #>               #> parent status #> child  tol    #>  #> RHO : #> (a) #>         class #> response       1       2       3 #>    1(V1)  0.2994  0.2836  0.7262 #>    2      0.6747  0.5579  0.2738 #>    3      0.0260  0.1585  0.0000 #>    1(V2)  0.9913  0.0000  1.0000 #>    2      0.0000  0.9310  0.0000 #>    3      0.0087  0.0000  0.0000 #>    4      0.0000  0.0000  0.0000 #>    5      0.0000  0.0690  0.0000 #>    1(V3)  0.9542  0.3384  0.6021 #>    2      0.0296  0.4848  0.3979 #>    3      0.0007  0.1035  0.0000 #>    4      0.0086  0.0734  0.0000 #>    5      0.0069  0.0000  0.0000 #>  #>        V1     V2    V3    #> status PAPRES PADEG MADEG #> (b) #>         class #> response       1       2       3       4 #>    1(V1)  0.4429  0.0025  0.0103  1.0000 #>    2      0.5571  0.9975  0.9897  0.0000 #>    1(V2)  0.4005  0.0645  1.0000  0.9908 #>    2      0.5995  0.9355  0.0000  0.0092 #>    1(V3)  0.5606  0.1378  1.0000  0.9037 #>    2      0.4394  0.8622  0.0000  0.0963 #>    1(V4)  0.4526  0.0207  0.2167  0.9440 #>    2      0.5474  0.9793  0.7833  0.0560 #>    1(V5)  0.2327  0.1106  0.7104  0.8720 #>    2      0.7673  0.8894  0.2896  0.1280 #>  #>     V1     V2     V3      V4     V5     #> tol TOLRAC TOLCOM TOLHOMO TOLATH TOLMIL  # \\donttest{ regress(model_lta, status ~ SEX, data) #> Coefficients:      #> class  (Intercept)  SEXFEMALE #>   1/3   1.086        0.309    #>   2/3  -0.214       -0.321    regress(model_lta, status ~ SEX, data, method = \"BCH\") #> Coefficients:      #> class  (Intercept)  SEXFEMALE #>   1/3   1.1746       0.6793   #>   2/3  -0.0986      -0.1304   regress(model_lta, status ~ SEX, data, method = \"ML\") #> Coefficients:      #> class  (Intercept)  SEXFEMALE #>   1/3  2.206        1.873     #>   2/3  0.508        1.037     # }"},{"path":"https://kim0sun.github.io/slca/reference/nlsy97.html","id":null,"dir":"Reference","previous_headings":"","what":"NLSY97 Substance Use Data — nlsy97","title":"NLSY97 Substance Use Data — nlsy97","text":"dataset contains substance use behavior data National Longitudinal Survey Youth 1997 (NLSY97) three years: 1998, 2003, 2008. dataset focuses youth born 1984 tracks three types substance use behaviors: tobacco/cigarette smoking, alcohol drinking, marijuana use.","code":""},{"path":"https://kim0sun.github.io/slca/reference/nlsy97.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NLSY97 Substance Use Data — nlsy97","text":"","code":"nlsy97"},{"path":"https://kim0sun.github.io/slca/reference/nlsy97.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NLSY97 Substance Use Data — nlsy97","text":"data frame 1004 rows 38 columns: SEX Respondent's sex RACE Respondent's race ESMK_98, ESMK_03, ESMK_08 (Ever smoked) Ever smoked 1998, 2003, 2008 (0: , 1: Yes) FSMK_98, FSMK_03, FSMK_08 (Frequent smoke) Monthly smoking 1998, 2003, 2008 (0: , 1: Yes) DSMK_98, DSMK_03, DSMK_08 (Daily smoke) Daily smoking 1998, 2003, 2008 (0: , 1: Yes) HSMK_98, HSMK_03, HSMK_08 (Heavy smoke) 10+ cigarettes per day 1998, 2003, 2008 (0: , 1: Yes) EDRK_98, EDRK_03, EDRK_08 (Ever drunk) Ever drunk 1998, 2003, 2008? (0: , 1: Yes) CDRK_98, CDRK_03, CDRK_08 (Current drinker) Monthly drinking 1998, 2003, 2008 (0: , 1: Yes) WDRK_98, WDRK_03, WDRK_08 (Weakly drinker) 5+ days drinking month 1998, 2003, 2008 (0: , 1: Yes) BDRK_98, BDRK_03, BDRK_08 (Binge drinker) 5+ drinks day least one time last 30 day (0: , 1: Yes) EMRJ_98, EMRJ_03, EMRJ_08 (Ever marijuana used) ever used marijuana 1998, 2003, 2008? (0: , 1: Yes) CMRJ_98, CMRJ_03, CMRJ_08 (Current marijuana user) Monthly marijuana use 1998, 2003, 2008 (0: , 1: Yes) OMRJ_98, OMRJ_03, OMRJ_08 (Occasional marijuana user) 10+ days marijuana use month 1998, 2003, 2008 (0: , 1: Yes) SMRJ_98, SMRJ_03, SMRJ_08 (School/work marijuana user) Marijuana use /school work 1998, 2003, 2008 (0: , 1: Yes)","code":""},{"path":"https://kim0sun.github.io/slca/reference/nlsy97.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NLSY97 Substance Use Data — nlsy97","text":"National Longitudinal Survey Youth 1997 (NLSY97)","code":""},{"path":"https://kim0sun.github.io/slca/reference/nlsy97.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NLSY97 Substance Use Data — nlsy97","text":"Bureau Labor Statistics, U.S. Department Labor. National Longitudinal Survey Youth 1997 cohort, 1997-2017 (rounds 1-18). Produced distributed Center Human Resource Research (CHRR), Ohio State University. Columbus, OH: 2019.","code":""},{"path":"https://kim0sun.github.io/slca/reference/nlsy97.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NLSY97 Substance Use Data — nlsy97","text":"","code":"library(magrittr) nlsy_smoke <- slca(SMK_98(3) ~ ESMK_98 + FSMK_98 + DSMK_98 + HSMK_98) %>%    estimate(data = nlsy97, control = list(verbose = FALSE)) summary(nlsy_smoke) #> Structural Latent Class Model #>  #> Summary of model structure #>                                     #>  Number of manifest variables     4 #>  Number of latent class variables 1 #>  #>  Latent variables (Root*):                 #>   Label: SMK_98* #>  nclass: 3       #>  #>  Measurement model:                                                      #>   SMK_98 -> { ESMK_98, FSMK_98, DSMK_98, HSMK_98 }  a #>  #>  #> Summary of manifest variables #>  #>  Categories for each variable: #>           response #>             1    2  #>    ESMK_98  Yes  No #>    FSMK_98  Yes  No #>    DSMK_98  Yes  No #>    HSMK_98  Yes  No #>  #>  Frequencies for each categories: #>           response #>               1    2  <NA> #>    ESMK_98  558  446     0 #>    FSMK_98  413  591     0 #>    DSMK_98  179  825     0 #>    HSMK_98  115  889     0 #>  #>  #> Summary of model fit #>                                              #>  Number of observations                 1004 #>  Number of free parameters                14 #>  Log-likelihood                    -1536.221 #>  Information criteria                        #>    Akaike (AIC)                     3100.442 #>    Bayesian (BIC)                   3169.207 #>  Chi-squared Tests                           #>    Residual degree of freedom (df)         1 #>    Pearson Chi-squared (X-squared)   118.589 #>      P(>Chi)                           0.000 #>    Likelihood Ratio (G-squared)      125.712 #>      P(>Chi)                           0.000  # \\donttest{ # JLCA model_jlca <- slca(    SMK_98(3) ~ ESMK_98 + FSMK_98 + DSMK_98 + HSMK_98,    DRK_98(3) ~ EDRK_98 + CDRK_98 + WDRK_98 + BDRK_98,    MRJ_98(3) ~ EMRJ_98 + CMRJ_98 + OMRJ_98 + SMRJ_98,    SUB_98(4) ~ SMK_98 + DRK_98 + MRJ_98 ) %>% estimate(data = nlsy97, control = list(verbose = FALSE)) summary(model_jlca) #> Structural Latent Class Model #>  #> Summary of model structure #>                                      #>  Number of manifest variables     12 #>  Number of latent class variables  4 #>  #>  Latent variables (Root*):                                      #>   Label: SMK_98 DRK_98 MRJ_98 SUB_98* #>  nclass: 3      3      3      4       #>  #>  Measurement model:                                                      #>   SMK_98 -> { ESMK_98, FSMK_98, DSMK_98, HSMK_98 }  a #>   DRK_98 -> { EDRK_98, CDRK_98, WDRK_98, BDRK_98 }  b #>   MRJ_98 -> { EMRJ_98, CMRJ_98, OMRJ_98, SMRJ_98 }  c #>  #>  Structural model:                                       #>   SUB_98 -> { SMK_98, DRK_98, MRJ_98 } #>  #>  Dependency constraints: #>   A                B                C                #>   SUB_98 -> SMK_98 SUB_98 -> DRK_98 SUB_98 -> MRJ_98 #>  #>  Tree of structural model:                    #>   SUB_98  -> SMK_98 #>           -> DRK_98 #>           -> MRJ_98 #>  #>  #> Summary of manifest variables #>  #>  Categories for each variable: #>           response #>             1    2  #>    ESMK_98  Yes  No #>    FSMK_98  Yes  No #>    DSMK_98  Yes  No #>    HSMK_98  Yes  No #>    EDRK_98  Yes  No #>    CDRK_98  Yes  No #>    WDRK_98  Yes  No #>    BDRK_98  Yes  No #>    EMRJ_98  Yes  No #>    CMRJ_98  Yes  No #>    OMRJ_98  Yes  No #>    SMRJ_98  Yes  No #>  #>  Frequencies for each categories: #>           response #>               1    2  <NA> #>    ESMK_98  558  446     0 #>    FSMK_98  413  591     0 #>    DSMK_98  179  825     0 #>    HSMK_98  115  889     0 #>    EDRK_98  735  269     0 #>    CDRK_98  521  483     0 #>    WDRK_98  218  786     0 #>    BDRK_98  288  716     0 #>    EMRJ_98  383  621     0 #>    CMRJ_98  226  778     0 #>    OMRJ_98   92  912     0 #>    SMRJ_98   98  906     0 #>  #>  #> Summary of model fit #>                                              #>  Number of observations                 1004 #>  Number of free parameters                63 #>  Log-likelihood                    -4071.677 #>  Information criteria                        #>    Akaike (AIC)                     8269.355 #>    Bayesian (BIC)                   8578.795 #>  Chi-squared Tests                           #>    Residual degree of freedom (df)      4032 #>    Pearson Chi-squared (X-squared)   289.587 #>      P(>Chi)                           1.000 #>    Likelihood Ratio (G-squared)      308.174 #>      P(>Chi)                           1.000 param(model_jlca) #> PI : #> (SUB_98) #>   class #>          1       2       3       4 #>     0.1770  0.3639  0.3019  0.1572 #>  #> TAU : #> (A) #>      parent #> child       1       2       3       4 #>     1  0.2148  0.0634  0.4920  0.0000 #>     2  0.2518  0.8976  0.1019  0.4085 #>     3  0.5335  0.0390  0.4061  0.5915 #>               #> parent SUB_98 #> child  SMK_98 #> (B) #>      parent #> child       1       2       3       4 #>     1  0.8875  0.1874  0.0504  0.4387 #>     2  0.1125  0.7594  0.0432  0.1207 #>     3  0.0000  0.0532  0.9064  0.4405 #>               #> parent SUB_98 #> child  DRK_98 #> (C) #>      parent #> child       1       2       3       4 #>     1  0.0000  0.0208  0.5022  0.0000 #>     2  0.7046  0.0084  0.3131  0.0000 #>     3  0.2954  0.9708  0.1848  1.0000 #>               #> parent SUB_98 #> child  MRJ_98 #>  #> RHO : #> (a) #>         class #> response       1       2       3 #>    1(V1)  1.0000  0.0471  1.0000 #>    2      0.0000  0.9529  0.0000 #>    1(V2)  1.0000  0.0000  0.6223 #>    2      0.0000  1.0000  0.3777 #>    1(V3)  0.8505  0.0000  0.0000 #>    2      0.1495  1.0000  1.0000 #>    1(V4)  0.5464  0.0000  0.0000 #>    2      0.4536  1.0000  1.0000 #>  #>        V1      V2      V3      V4      #> SMK_98 ESMK_98 FSMK_98 DSMK_98 HSMK_98 #> (b) #>         class #> response       1       2       3 #>    1(V1)  1.0000  0.1839  1.0000 #>    2      0.0000  0.8161  0.0000 #>    1(V2)  0.5063  0.0000  1.0000 #>    2      0.4937  1.0000  0.0000 #>    1(V3)  0.0000  0.0000  0.5993 #>    2      1.0000  1.0000  0.4007 #>    1(V4)  0.0000  0.0000  0.7918 #>    2      1.0000  1.0000  0.2082 #>  #>        V1      V2      V3      V4      #> DRK_98 EDRK_98 CDRK_98 WDRK_98 BDRK_98 #> (c) #>         class #> response       1       2       3 #>    1(V1)  1.0000  1.0000  0.0000 #>    2      0.0000  0.0000  1.0000 #>    1(V2)  1.0000  0.2965  0.0000 #>    2      0.0000  0.7035  1.0000 #>    1(V3)  0.5757  0.0000  0.0000 #>    2      0.4243  1.0000  1.0000 #>    1(V4)  0.6132  0.0000  0.0000 #>    2      0.3868  1.0000  1.0000 #>  #>        V1      V2      V3      V4      #> MRJ_98 EMRJ_98 CMRJ_98 OMRJ_98 SMRJ_98  # JLCPA nlsy_jlcpa <- slca(    SMK_98(3) ~ ESMK_98 + FSMK_98 + DSMK_98 + HSMK_98,    DRK_98(3) ~ EDRK_98 + CDRK_98 + WDRK_98 + BDRK_98,    MRJ_98(3) ~ EMRJ_98 + CMRJ_98 + OMRJ_98 + SMRJ_98,    SUB_98(5) ~ SMK_98 + DRK_98 + MRJ_98,    SMK_03(3) ~ ESMK_03 + FSMK_03 + DSMK_03 + HSMK_03,    DRK_03(3) ~ EDRK_03 + CDRK_03 + WDRK_03 + BDRK_03,    MRJ_03(3) ~ EMRJ_03 + CMRJ_03 + OMRJ_03 + SMRJ_03,    SUB_03(5) ~ SMK_03 + DRK_03 + MRJ_03,    SMK_08(3) ~ ESMK_08 + FSMK_08 + DSMK_08 + HSMK_08,    DRK_08(3) ~ EDRK_08 + CDRK_08 + WDRK_08 + BDRK_08,    MRJ_08(3) ~ EMRJ_08 + CMRJ_08 + OMRJ_08 + SMRJ_08,    SUB_08(5) ~ SMK_08 + DRK_08 + MRJ_08,    PROF(4) ~ SUB_98 + SUB_03 + SUB_08,    constraints = list(       c(\"SMK_98\", \"SMK_03\", \"SMK_08\"),       c(\"DRK_98\", \"DRK_03\", \"DRK_08\"),       c(\"MRJ_98\", \"MRJ_03\", \"MRJ_08\"),       c(\"SUB_98 ~ SMK_98\", \"SUB_03 ~ SMK_03\", \"SUB_08 ~ SMK_08\"),       c(\"SUB_98 ~ DRK_98\", \"SUB_03 ~ DRK_03\", \"SUB_08 ~ DRK_08\"),       c(\"SUB_98 ~ MRJ_98\", \"SUB_03 ~ MRJ_03\", \"SUB_08 ~ MRJ_08\")    ) ) %>% estimate(nlsy97, control = list(verbose = FALSE)) # }"},{"path":"https://kim0sun.github.io/slca/reference/nlsy_jlcpa.html","id":null,"dir":"Reference","previous_headings":"","what":"JLCPA Model Estimated with NLSY97 Data — nlsy_jlcpa","title":"JLCPA Model Estimated with NLSY97 Data — nlsy_jlcpa","text":"slca model estimated using NLSY97 dataset.","code":""},{"path":"https://kim0sun.github.io/slca/reference/nlsy_jlcpa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JLCPA Model Estimated with NLSY97 Data — nlsy_jlcpa","text":"","code":"nlsy_jlcpa"},{"path":"https://kim0sun.github.io/slca/reference/nlsy_jlcpa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"JLCPA Model Estimated with NLSY97 Data — nlsy_jlcpa","text":"slcafit object estimated JLCPA model using nlsy97 dataset.","code":""},{"path":"https://kim0sun.github.io/slca/reference/nlsy_jlcpa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"JLCPA Model Estimated with NLSY97 Data — nlsy_jlcpa","text":"Bureau Labor Statistics, U.S. Department Labor. National Longitudinal Survey Youth 1997 cohort, 1997-2017 (rounds 1-18). Produced distributed Center Human Resource Research (CHRR), Ohio State University. Columbus, OH: 2019. Jeon, S., Seo, T. S., Anthony, J. C., & Chung, H. (2022). Latent Class Analysis Repeatedly Measured Multiple Latent Class Variables. Multivariate Behavioral Research, 57(2–3), 341–355.","code":""},{"path":[]},{"path":"https://kim0sun.github.io/slca/reference/param.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Estimated Parameters of an slcafit Object — param","title":"Print Estimated Parameters of an slcafit Object — param","text":"Prints estimated parameters slca model using slcafit object.","code":""},{"path":"https://kim0sun.github.io/slca/reference/param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Estimated Parameters of an slcafit Object — param","text":"","code":"param(object, ...)  # S3 method for class 'slcafit' param(    object, type = c(\"probs\", \"logit\"),    se = FALSE, index = FALSE, ... )"},{"path":"https://kim0sun.github.io/slca/reference/param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Estimated Parameters of an slcafit Object — param","text":"object object class slcafit. ... additional arguments passed methods. type character string specifying format estimated parameters displayed. options \"probs\" probability format \"logit\" log-odds (logit) format. default setting \"probs\". se logical value indicating whether display standard errors (TRUE) parameter estimates (FALSE). default FALSE. index logical value indicating whether include (TRUE) exclude (FALSE) indices estimated parameters output. default FALSE.","code":""},{"path":"https://kim0sun.github.io/slca/reference/param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Estimated Parameters of an slcafit Object — param","text":"list containing requested estimated parameters standard errors (se = TRUE). components list include: pi Membership probabilities root latent variable. tau Conditional probabilities latent class variables, represented uppercase letters account measurement invariance. rho Item response probabilities measurement model, represented lowercase letters account measurement invariance.","code":""},{"path":"https://kim0sun.github.io/slca/reference/predict.slcafit.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Predictions for Estimated slca Object — predict.slcafit","title":"Model Predictions for Estimated slca Object — predict.slcafit","text":"Provides predicted class memberships posterior probabilities new data based fitted slca model.","code":""},{"path":"https://kim0sun.github.io/slca/reference/predict.slcafit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Predictions for Estimated slca Object — predict.slcafit","text":"","code":"# S3 method for class 'slcafit' predict(object, newdata, type = c(\"class\", \"posterior\"), ...)"},{"path":"https://kim0sun.github.io/slca/reference/predict.slcafit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Predictions for Estimated slca Object — predict.slcafit","text":"object object class slcafit, representing fitted slca model. newdata data.frame containing variables used estimate object. type character string indicating type prediction. Use \"class\" obtain predicted class membership observation latent class variable, \"posterior\" retrieve posterior probabilities class. default \"class\". ... Additional arguments passed methods.","code":""},{"path":"https://kim0sun.github.io/slca/reference/predict.slcafit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Predictions for Estimated slca Object — predict.slcafit","text":"data.frame list depending type: type = \"class\", data.frame returned rows represent observations columns correspond latent class variables. type = \"posterior\", list returned containing data.frames posterior probabilities latent class variable.","code":""},{"path":"https://kim0sun.github.io/slca/reference/regress.html","id":null,"dir":"Reference","previous_headings":"","what":"Regress Exogenous Variables on Latent Variables — regress","title":"Regress Exogenous Variables on Latent Variables — regress","text":"Performs regression analysis examine influence exogenous (external) variables latent class variables estimated slca model. function uses logistic regression three-step approach account measurement error.","code":""},{"path":"https://kim0sun.github.io/slca/reference/regress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regress Exogenous Variables on Latent Variables — regress","text":"","code":"regress(object, ...)  # S3 method for class 'slcafit' regress(    object, formula, data = parent.frame(),    imputation = c(\"modal\", \"prob\"),    method = c(\"naive\", \"BCH\", \"ML\"), ... )  # S3 method for class 'slcafit' regress(   object,   formula,   data = parent.frame(),   imputation = c(\"modal\", \"prob\"),   method = c(\"naive\", \"BCH\", \"ML\"),   ... )"},{"path":"https://kim0sun.github.io/slca/reference/regress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regress Exogenous Variables on Latent Variables — regress","text":"object object class slcafit. ... additional arguments. formula formula specifying regression model, including latent class variables (estimated model) exogenous variables. data optional data.frame containing exogenous variables interest. omitted, variables taken parent environment. imputation character string specifying imputation method latent class assignment. Options include: \"modal\": Assigns individual latent class highest posterior probability. \"prob\": Assigns classes probabilistically based posterior probability distribution. method character string specifying method adjust bias three-step approach. Options include: \"naive\": simple approach without correction classification error. \"BCH\": bias-adjusted Bolck, Croon, Hagenaars method. \"ML\": maximum likelihood approach accounts classification error.","code":""},{"path":"https://kim0sun.github.io/slca/reference/regress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regress Exogenous Variables on Latent Variables — regress","text":"list class reg.slca following components: coefficients matrix regression coefficients representing odds ratios latent class baseline class (last class). std.err matrix standard errors corresponding regression coefficients. vcov variance-covariance matrix regression coefficients. dim dimensions coefficients matrix. ll log-likelihood regression model. summary function can used display regression coefficients, standard errors, Wald statistics, p-values.","code":""},{"path":"https://kim0sun.github.io/slca/reference/regress.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Regress Exogenous Variables on Latent Variables — regress","text":"Vermunt, J. K. (2010). Latent Class Modeling Covariates: Two Improved Three-Step Approaches. Political Analysis, 18(4), 450–469. http://www.jstor.org/stable/25792024","code":""},{"path":"https://kim0sun.github.io/slca/reference/regress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regress Exogenous Variables on Latent Variables — regress","text":"","code":"library(magrittr) names(nlsy97) #>  [1] \"SEX\"     \"RACE\"    \"ESMK_98\" \"FSMK_98\" \"DSMK_98\" \"HSMK_98\" \"EDRK_98\" #>  [8] \"CDRK_98\" \"WDRK_98\" \"BDRK_98\" \"EMRJ_98\" \"CMRJ_98\" \"OMRJ_98\" \"SMRJ_98\" #> [15] \"ESMK_03\" \"FSMK_03\" \"DSMK_03\" \"HSMK_03\" \"EDRK_03\" \"CDRK_03\" \"WDRK_03\" #> [22] \"BDRK_03\" \"EMRJ_03\" \"CMRJ_03\" \"OMRJ_03\" \"SMRJ_03\" \"ESMK_08\" \"FSMK_08\" #> [29] \"DSMK_08\" \"HSMK_08\" \"EDRK_08\" \"CDRK_08\" \"WDRK_08\" \"BDRK_08\" \"EMRJ_08\" #> [36] \"CMRJ_08\" \"OMRJ_08\" \"SMRJ_08\" nlsy_jlcpa %>% regress(SMK_98 ~ SEX, nlsy97) #> Coefficients:      #> class  (Intercept)  SEXFemale #>   1/3   0.3983      -0.4445   #>   2/3  -0.6614       0.0804   # \\donttest{ nlsy_jlcpa %>% regress(PROF ~ SEX, nlsy97) #> Coefficients:      #> class  (Intercept)  SEXFemale #>   1/4   0.436       -0.106    #>   2/4   0.157       -0.210    #>   3/4   0.443       -0.221    # }"},{"path":"https://kim0sun.github.io/slca/reference/reorder.slcafit.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder Latent Class Membership of Latent Class Variables — reorder.slcafit","title":"Reorder Latent Class Membership of Latent Class Variables — reorder.slcafit","text":"Reorders latent class membership specified latent class variables slcafit object.","code":""},{"path":"https://kim0sun.github.io/slca/reference/reorder.slcafit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder Latent Class Membership of Latent Class Variables — reorder.slcafit","text":"","code":"# S3 method for class 'slcafit' reorder(x, ...)"},{"path":"https://kim0sun.github.io/slca/reference/reorder.slcafit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder Latent Class Membership of Latent Class Variables — reorder.slcafit","text":"x object class slcafit. ... additional arguments specifying new order latent class variables.","code":""},{"path":"https://kim0sun.github.io/slca/reference/reorder.slcafit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder Latent Class Membership of Latent Class Variables — reorder.slcafit","text":"modified slcafit object latent classes reordered according specified order.","code":""},{"path":"https://kim0sun.github.io/slca/reference/reorder.slcafit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder Latent Class Membership of Latent Class Variables — reorder.slcafit","text":"","code":"library(magrittr) nlsy_jlcpa %>% param #> PI : #> (PROF) #>   class #>          1       2       3       4 #>     0.2790  0.2146  0.2869  0.2195 #>  #> TAU : #> (A) #>      parent #> child       1       2       3       4 #>     1  0.0000  0.0000  0.1745  0.0000 #>     2  0.0901  0.4456  0.1939  0.0403 #>     3  0.3771  0.1675  0.1825  0.7018 #>     4  0.2620  0.0000  0.0000  0.0813 #>     5  0.2709  0.3869  0.4491  0.1766 #>               #> parent PROF   #> child  SUB_98 #> (B) #>      parent #> child       1       2       3       4 #>     1  0.0000  0.0114  0.8719  0.0000 #>     2  0.0000  0.9617  0.0000  0.0079 #>     3  0.0000  0.0000  0.0965  0.9210 #>     4  0.9941  0.0000  0.0000  0.0711 #>     5  0.0059  0.0269  0.0316  0.0000 #>               #> parent PROF   #> child  SUB_03 #> (C) #>      parent #> child       1       2       3       4 #>     1  0.0019  0.1821  0.8024  0.0319 #>     2  0.0097  0.7202  0.0000  0.0000 #>     3  0.0573  0.0442  0.1844  0.7168 #>     4  0.9311  0.0356  0.0084  0.2473 #>     5  0.0000  0.0179  0.0048  0.0040 #>               #> parent PROF   #> child  SUB_08 #> (D) #>      parent #> child       1       2       3       4       5 #>     1  0.0254  0.0457  0.9505  0.7958  0.1613 #>     2  0.7516  0.6690  0.0051  0.0000  0.1631 #>     3  0.2230  0.2853  0.0444  0.2042  0.6755 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  SMK_98 SMK_03 SMK_08 #> (E) #>      parent #> child       1       2       3       4       5 #>     1  0.5664  0.8533  0.0335  0.7521  0.2872 #>     2  0.2229  0.1264  0.2589  0.2414  0.6127 #>     3  0.2107  0.0203  0.7075  0.0065  0.1001 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  DRK_98 DRK_03 DRK_08 #> (F) #>      parent #> child       1       2       3       4       5 #>     1  0.0871  0.1442  0.0317  0.1525  0.7278 #>     2  0.0617  0.8387  0.0095  0.2302  0.1258 #>     3  0.8512  0.0170  0.9588  0.6173  0.1463 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  MRJ_98 MRJ_03 MRJ_08 #>  #> RHO : #> (a) #>         class #> response       1       2       3 #>    1(V1)  0.0134  1.0000  1.0000 #>    2      0.9866  0.0000  0.0000 #>    1(V2)  0.0000  1.0000  0.6701 #>    2      1.0000  0.0000  0.3299 #>    1(V3)  0.0000  0.8833  0.0000 #>    2      1.0000  0.1167  1.0000 #>    1(V4)  0.0000  0.6460  0.0000 #>    2      1.0000  0.3540  1.0000 #>  #>        V1      V2      V3      V4      #> SMK_98 ESMK_98 FSMK_98 DSMK_98 HSMK_98 #> SMK_03 ESMK_03 FSMK_03 DSMK_03 HSMK_03 #> SMK_08 ESMK_08 FSMK_08 DSMK_08 HSMK_08 #> (b) #>         class #> response       1       2       3 #>    1(V1)  1.0000  1.0000  0.0759 #>    2      0.0000  0.0000  0.9241 #>    1(V2)  1.0000  0.5760  0.0000 #>    2      0.0000  0.4240  1.0000 #>    1(V3)  0.6934  0.0000  0.0000 #>    2      0.3066  1.0000  1.0000 #>    1(V4)  0.8061  0.0000  0.0000 #>    2      0.1939  1.0000  1.0000 #>  #>        V1      V2      V3      V4      #> DRK_98 EDRK_98 CDRK_98 WDRK_98 BDRK_98 #> DRK_03 EDRK_03 CDRK_03 WDRK_03 BDRK_03 #> DRK_08 EDRK_08 CDRK_08 WDRK_08 BDRK_08 #> (c) #>         class #> response       1       2       3 #>    1(V1)  0.5189  1.0000  0.0002 #>    2      0.4811  0.0000  0.9998 #>    1(V2)  0.0000  1.0000  0.0000 #>    2      1.0000  0.0000  1.0000 #>    1(V3)  0.0000  0.5259  0.0000 #>    2      1.0000  0.4741  1.0000 #>    1(V4)  0.0000  0.3720  0.0000 #>    2      1.0000  0.6280  1.0000 #>  #>        V1      V2      V3      V4      #> MRJ_98 EMRJ_98 CMRJ_98 OMRJ_98 SMRJ_98 #> MRJ_03 EMRJ_03 CMRJ_03 OMRJ_03 SMRJ_03 #> MRJ_08 EMRJ_08 CMRJ_08 OMRJ_08 SMRJ_08  # Reorder the RHO parameters as ascending order reordered1 <- nlsy_jlcpa %>%    reorder(SMK_98 = c(1, 3, 2),            DRK_98 = c(3, 2, 1),            MRJ_98 = c(3, 1, 2)) reordered1 %>% param #> PI : #> (PROF) #>   class #>          1       2       3       4 #>     0.2790  0.2146  0.2869  0.2195 #>  #> TAU : #> (A) #>      parent #> child       1       2       3       4 #>     1  0.0000  0.0000  0.1745  0.0000 #>     2  0.0901  0.4456  0.1939  0.0403 #>     3  0.3771  0.1675  0.1825  0.7018 #>     4  0.2620  0.0000  0.0000  0.0813 #>     5  0.2709  0.3869  0.4491  0.1766 #>               #> parent PROF   #> child  SUB_98 #> (B) #>      parent #> child       1       2       3       4 #>     1  0.0000  0.0114  0.8719  0.0000 #>     2  0.0000  0.9617  0.0000  0.0079 #>     3  0.0000  0.0000  0.0965  0.9210 #>     4  0.9941  0.0000  0.0000  0.0711 #>     5  0.0059  0.0269  0.0316  0.0000 #>               #> parent PROF   #> child  SUB_03 #> (C) #>      parent #> child       1       2       3       4 #>     1  0.0019  0.1821  0.8024  0.0319 #>     2  0.0097  0.7202  0.0000  0.0000 #>     3  0.0573  0.0442  0.1844  0.7168 #>     4  0.9311  0.0356  0.0084  0.2473 #>     5  0.0000  0.0179  0.0048  0.0040 #>               #> parent PROF   #> child  SUB_08 #> (D) #>      parent #> child       1       2       3       4       5 #>     1  0.0254  0.0457  0.9505  0.7958  0.1613 #>     2  0.2230  0.2853  0.0444  0.2042  0.6755 #>     3  0.7516  0.6690  0.0051  0.0000  0.1631 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  SMK_98 SMK_03 SMK_08 #> (E) #>      parent #> child       1       2       3       4       5 #>     1  0.2107  0.0203  0.7075  0.0065  0.1001 #>     2  0.2229  0.1264  0.2589  0.2414  0.6127 #>     3  0.5664  0.8533  0.0335  0.7521  0.2872 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  DRK_98 DRK_03 DRK_08 #> (F) #>      parent #> child       1       2       3       4       5 #>     1  0.8512  0.0170  0.9588  0.6173  0.1463 #>     2  0.0871  0.1442  0.0317  0.1525  0.7278 #>     3  0.0617  0.8387  0.0095  0.2302  0.1258 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  MRJ_98 MRJ_03 MRJ_08 #>  #> RHO : #> (a) #>         class #> response       1       2       3 #>    1(V1)  0.0134  1.0000  1.0000 #>    2      0.9866  0.0000  0.0000 #>    1(V2)  0.0000  0.6701  1.0000 #>    2      1.0000  0.3299  0.0000 #>    1(V3)  0.0000  0.0000  0.8833 #>    2      1.0000  1.0000  0.1167 #>    1(V4)  0.0000  0.0000  0.6460 #>    2      1.0000  1.0000  0.3540 #>  #>        V1      V2      V3      V4      #> SMK_98 ESMK_98 FSMK_98 DSMK_98 HSMK_98 #> SMK_03 ESMK_03 FSMK_03 DSMK_03 HSMK_03 #> SMK_08 ESMK_08 FSMK_08 DSMK_08 HSMK_08 #> (b) #>         class #> response       1       2       3 #>    1(V1)  0.0759  1.0000  1.0000 #>    2      0.9241  0.0000  0.0000 #>    1(V2)  0.0000  0.5760  1.0000 #>    2      1.0000  0.4240  0.0000 #>    1(V3)  0.0000  0.0000  0.6934 #>    2      1.0000  1.0000  0.3066 #>    1(V4)  0.0000  0.0000  0.8061 #>    2      1.0000  1.0000  0.1939 #>  #>        V1      V2      V3      V4      #> DRK_98 EDRK_98 CDRK_98 WDRK_98 BDRK_98 #> DRK_03 EDRK_03 CDRK_03 WDRK_03 BDRK_03 #> DRK_08 EDRK_08 CDRK_08 WDRK_08 BDRK_08 #> (c) #>         class #> response       1       2       3 #>    1(V1)  0.0002  0.5189  1.0000 #>    2      0.9998  0.4811  0.0000 #>    1(V2)  0.0000  0.0000  1.0000 #>    2      1.0000  1.0000  0.0000 #>    1(V3)  0.0000  0.0000  0.5259 #>    2      1.0000  1.0000  0.4741 #>    1(V4)  0.0000  0.0000  0.3720 #>    2      1.0000  1.0000  0.6280 #>  #>        V1      V2      V3      V4      #> MRJ_98 EMRJ_98 CMRJ_98 OMRJ_98 SMRJ_98 #> MRJ_03 EMRJ_03 CMRJ_03 OMRJ_03 SMRJ_03 #> MRJ_08 EMRJ_08 CMRJ_08 OMRJ_08 SMRJ_08 # Label class1: nonuse #       class2: lifetime use #       class3: current use  # Reorder the TAU parameters for joint classes as ascending order reordered2 <- reordered1 %>%    reorder(SUB_98 = c(3, 4, 5, 1, 2)) reordered2 %>% param #> PI : #> (PROF) #>   class #>          1       2       3       4 #>     0.2790  0.2146  0.2869  0.2195 #>  #> TAU : #> (A) #>      parent #> child       1       2       3       4 #>     1  0.3771  0.1675  0.1825  0.7018 #>     2  0.2620  0.0000  0.0000  0.0813 #>     3  0.2709  0.3869  0.4491  0.1766 #>     4  0.0000  0.0000  0.1745  0.0000 #>     5  0.0901  0.4456  0.1939  0.0403 #>               #> parent PROF   #> child  SUB_98 #> (B) #>      parent #> child       1       2       3       4 #>     1  0.0000  0.0000  0.0965  0.9210 #>     2  0.9941  0.0000  0.0000  0.0711 #>     3  0.0059  0.0269  0.0316  0.0000 #>     4  0.0000  0.0114  0.8719  0.0000 #>     5  0.0000  0.9617  0.0000  0.0079 #>               #> parent PROF   #> child  SUB_03 #> (C) #>      parent #> child       1       2       3       4 #>     1  0.0573  0.0442  0.1844  0.7168 #>     2  0.9311  0.0356  0.0084  0.2473 #>     3  0.0000  0.0179  0.0048  0.0040 #>     4  0.0019  0.1821  0.8024  0.0319 #>     5  0.0097  0.7202  0.0000  0.0000 #>               #> parent PROF   #> child  SUB_08 #> (D) #>      parent #> child       1       2       3       4       5 #>     1  0.9505  0.7958  0.1613  0.0254  0.0457 #>     2  0.0444  0.2042  0.6755  0.2230  0.2853 #>     3  0.0051  0.0000  0.1631  0.7516  0.6690 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  SMK_98 SMK_03 SMK_08 #> (E) #>      parent #> child       1       2       3       4       5 #>     1  0.7075  0.0065  0.1001  0.2107  0.0203 #>     2  0.2589  0.2414  0.6127  0.2229  0.1264 #>     3  0.0335  0.7521  0.2872  0.5664  0.8533 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  DRK_98 DRK_03 DRK_08 #> (F) #>      parent #> child       1       2       3       4       5 #>     1  0.9588  0.6173  0.1463  0.8512  0.0170 #>     2  0.0317  0.1525  0.7278  0.0871  0.1442 #>     3  0.0095  0.2302  0.1258  0.0617  0.8387 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  MRJ_98 MRJ_03 MRJ_08 #>  #> RHO : #> (a) #>         class #> response       1       2       3 #>    1(V1)  0.0134  1.0000  1.0000 #>    2      0.9866  0.0000  0.0000 #>    1(V2)  0.0000  0.6701  1.0000 #>    2      1.0000  0.3299  0.0000 #>    1(V3)  0.0000  0.0000  0.8833 #>    2      1.0000  1.0000  0.1167 #>    1(V4)  0.0000  0.0000  0.6460 #>    2      1.0000  1.0000  0.3540 #>  #>        V1      V2      V3      V4      #> SMK_98 ESMK_98 FSMK_98 DSMK_98 HSMK_98 #> SMK_03 ESMK_03 FSMK_03 DSMK_03 HSMK_03 #> SMK_08 ESMK_08 FSMK_08 DSMK_08 HSMK_08 #> (b) #>         class #> response       1       2       3 #>    1(V1)  0.0759  1.0000  1.0000 #>    2      0.9241  0.0000  0.0000 #>    1(V2)  0.0000  0.5760  1.0000 #>    2      1.0000  0.4240  0.0000 #>    1(V3)  0.0000  0.0000  0.6934 #>    2      1.0000  1.0000  0.3066 #>    1(V4)  0.0000  0.0000  0.8061 #>    2      1.0000  1.0000  0.1939 #>  #>        V1      V2      V3      V4      #> DRK_98 EDRK_98 CDRK_98 WDRK_98 BDRK_98 #> DRK_03 EDRK_03 CDRK_03 WDRK_03 BDRK_03 #> DRK_08 EDRK_08 CDRK_08 WDRK_08 BDRK_08 #> (c) #>         class #> response       1       2       3 #>    1(V1)  0.0002  0.5189  1.0000 #>    2      0.9998  0.4811  0.0000 #>    1(V2)  0.0000  0.0000  1.0000 #>    2      1.0000  1.0000  0.0000 #>    1(V3)  0.0000  0.0000  0.5259 #>    2      1.0000  1.0000  0.4741 #>    1(V4)  0.0000  0.0000  0.3720 #>    2      1.0000  1.0000  0.6280 #>  #>        V1      V2      V3      V4      #> MRJ_98 EMRJ_98 CMRJ_98 OMRJ_98 SMRJ_98 #> MRJ_03 EMRJ_03 CMRJ_03 OMRJ_03 SMRJ_03 #> MRJ_08 EMRJ_08 CMRJ_08 OMRJ_08 SMRJ_08 # Label class1: nonuse #       class2: heavy drinking only #       class3: not heavy use #       class4: heavy drinking & smoking #       class5: heavy use  # Reorder the TAU paramters for profiles as ascending order reordered3 <- reordered2 %>%    reorder(PROF = c(4, 1, 3, 2)) reordered3 %>% param #> PI : #> (PROF) #>   class #>          1       2       3       4 #>     0.2195  0.2790  0.2869  0.2146 #>  #> TAU : #> (A) #>      parent #> child       1       2       3       4 #>     1  0.7018  0.3771  0.1825  0.1675 #>     2  0.0813  0.2620  0.0000  0.0000 #>     3  0.1766  0.2709  0.4491  0.3869 #>     4  0.0000  0.0000  0.1745  0.0000 #>     5  0.0403  0.0901  0.1939  0.4456 #>               #> parent PROF   #> child  SUB_98 #> (B) #>      parent #> child       1       2       3       4 #>     1  0.9210  0.0000  0.0965  0.0000 #>     2  0.0711  0.9941  0.0000  0.0000 #>     3  0.0000  0.0059  0.0316  0.0269 #>     4  0.0000  0.0000  0.8719  0.0114 #>     5  0.0079  0.0000  0.0000  0.9617 #>               #> parent PROF   #> child  SUB_03 #> (C) #>      parent #> child       1       2       3       4 #>     1  0.7168  0.0573  0.1844  0.0442 #>     2  0.2473  0.9311  0.0084  0.0356 #>     3  0.0040  0.0000  0.0048  0.0179 #>     4  0.0319  0.0019  0.8024  0.1821 #>     5  0.0000  0.0097  0.0000  0.7202 #>               #> parent PROF   #> child  SUB_08 #> (D) #>      parent #> child       1       2       3       4       5 #>     1  0.9505  0.7958  0.1613  0.0254  0.0457 #>     2  0.0444  0.2042  0.6755  0.2230  0.2853 #>     3  0.0051  0.0000  0.1631  0.7516  0.6690 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  SMK_98 SMK_03 SMK_08 #> (E) #>      parent #> child       1       2       3       4       5 #>     1  0.7075  0.0065  0.1001  0.2107  0.0203 #>     2  0.2589  0.2414  0.6127  0.2229  0.1264 #>     3  0.0335  0.7521  0.2872  0.5664  0.8533 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  DRK_98 DRK_03 DRK_08 #> (F) #>      parent #> child       1       2       3       4       5 #>     1  0.9588  0.6173  0.1463  0.8512  0.0170 #>     2  0.0317  0.1525  0.7278  0.0871  0.1442 #>     3  0.0095  0.2302  0.1258  0.0617  0.8387 #>                             #> parent SUB_98 SUB_03 SUB_08 #> child  MRJ_98 MRJ_03 MRJ_08 #>  #> RHO : #> (a) #>         class #> response       1       2       3 #>    1(V1)  0.0134  1.0000  1.0000 #>    2      0.9866  0.0000  0.0000 #>    1(V2)  0.0000  0.6701  1.0000 #>    2      1.0000  0.3299  0.0000 #>    1(V3)  0.0000  0.0000  0.8833 #>    2      1.0000  1.0000  0.1167 #>    1(V4)  0.0000  0.0000  0.6460 #>    2      1.0000  1.0000  0.3540 #>  #>        V1      V2      V3      V4      #> SMK_98 ESMK_98 FSMK_98 DSMK_98 HSMK_98 #> SMK_03 ESMK_03 FSMK_03 DSMK_03 HSMK_03 #> SMK_08 ESMK_08 FSMK_08 DSMK_08 HSMK_08 #> (b) #>         class #> response       1       2       3 #>    1(V1)  0.0759  1.0000  1.0000 #>    2      0.9241  0.0000  0.0000 #>    1(V2)  0.0000  0.5760  1.0000 #>    2      1.0000  0.4240  0.0000 #>    1(V3)  0.0000  0.0000  0.6934 #>    2      1.0000  1.0000  0.3066 #>    1(V4)  0.0000  0.0000  0.8061 #>    2      1.0000  1.0000  0.1939 #>  #>        V1      V2      V3      V4      #> DRK_98 EDRK_98 CDRK_98 WDRK_98 BDRK_98 #> DRK_03 EDRK_03 CDRK_03 WDRK_03 BDRK_03 #> DRK_08 EDRK_08 CDRK_08 WDRK_08 BDRK_08 #> (c) #>         class #> response       1       2       3 #>    1(V1)  0.0002  0.5189  1.0000 #>    2      0.9998  0.4811  0.0000 #>    1(V2)  0.0000  0.0000  1.0000 #>    2      1.0000  1.0000  0.0000 #>    1(V3)  0.0000  0.0000  0.5259 #>    2      1.0000  1.0000  0.4741 #>    1(V4)  0.0000  0.0000  0.3720 #>    2      1.0000  1.0000  0.6280 #>  #>        V1      V2      V3      V4      #> MRJ_98 EMRJ_98 CMRJ_98 OMRJ_98 SMRJ_98 #> MRJ_03 EMRJ_03 CMRJ_03 OMRJ_03 SMRJ_03 #> MRJ_08 EMRJ_08 CMRJ_08 OMRJ_08 SMRJ_08 # Label class1: nonuse stayer #       class2: heavy drinking advancer #       class3: heavy drk & smk advancer #       class4: heavy use advancer"},{"path":"https://kim0sun.github.io/slca/reference/simulate.slca.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Data from an slca Model — simulate.slca","title":"Simulate Data from an slca Model — simulate.slca","text":"Simulates data based specified slca model. model parameters already estimated, can either provided user generated randomly.","code":""},{"path":"https://kim0sun.github.io/slca/reference/simulate.slca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Data from an slca Model — simulate.slca","text":"","code":"# S3 method for class 'slca' simulate(object, nsim = 500, seed = NULL, parm, nlevel, ...)"},{"path":"https://kim0sun.github.io/slca/reference/simulate.slca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Data from an slca Model — simulate.slca","text":"object slca object representing model data simulated. nsim integer specifying number response observations simulate. default 500. seed integer specifying random seed reproducibility. provided, results vary across runs. parm user-specified set parameters guide simulation. required model previously estimated. nlevel integer integer vector specifying number levels manifest item model. single integer provided, manifest items number levels. default 2. ... Additional arguments passed methods.","code":""},{"path":"https://kim0sun.github.io/slca/reference/simulate.slca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Data from an slca Model — simulate.slca","text":"list following components: class data.frame containing assigned latent class individual across latent class variables. response data.frame containing simulated manifest item responses.","code":""},{"path":"https://kim0sun.github.io/slca/reference/simulate.slca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Data from an slca Model — simulate.slca","text":"","code":"m1 <- slca(lc1[3] ~ x1 + x2 + x3 + x4 + x5,               lc2[4] ~ y1 + y2 + y3 + y4 + y5) sim <- simulate(m1, 1000) #> Error in is.nulll(seed): could not find function \"is.nulll\" sapply(sim$class, table) #> Error: object 'sim' not found  # simulate data with defined number of levels of manifest items m2 <- slca(lc1[3] ~ x1 + x2 + x3 + x4) sim <- simulate(m2, nlevel = c(3, 3, 3, 3)) #> Error in is.nulll(seed): could not find function \"is.nulll\" d <- sim$response #> Error: object 'sim' not found sapply(d, table) #> Error: object 'd' not found  sim <- simulate(m2, nlevel = c(x1 = 2, x3 = 3, x4 = 4, x5 = 5)) #> Error in is.nulll(seed): could not find function \"is.nulll\" d <- sim$response #> Error: object 'sim' not found sapply(d, table) #> Error: object 'd' not found  # simulate data with user-defined parameters pi <- rep(1 / 3, 3) rho <- c(.9, .1, .9, .1, .9, .1, .9, .1,          .9, .1, .9, .1, .1, .9, .1, .9,          .1, .9, .1, .9, .1, .9, .1, .9) par <- c(pi, rho) m3 <- slca(lc[3] ~ y1 + y2 + y3 + y4) sim <- simulate(m3, parm = par) #> Error in is.nulll(seed): could not find function \"is.nulll\" mf <- estimate(m3, sim$response) #> Error: object 'sim' not found param(mf) #> Error: object 'mf' not found"},{"path":"https://kim0sun.github.io/slca/reference/slca-package.html","id":null,"dir":"Reference","previous_headings":"","what":"slca: An R Package for Structural Modeling for Multiple Latent Class Variables — slca-package","title":"slca: An R Package for Structural Modeling for Multiple Latent Class Variables — slca-package","text":"slca package provides comprehensive toolkit implementation Structural Latent Class Models (SLCM). includes tools conducting Latent Transition Analysis (LTA), Latent Class Profile Analysis (LCPA), Joint Latent Class Analysis (JLCA), facilitating analysis complex latent structures statistical data.","code":""},{"path":[]},{"path":"https://kim0sun.github.io/slca/reference/slca-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"slca: An R Package for Structural Modeling for Multiple Latent Class Variables — slca-package","text":"Maintainer: Youngsun Kim yskstat@gmail.com (ORCID) Authors: Hwan Chung hwanch@korea.ac.kr (ORCID)","code":""},{"path":"https://kim0sun.github.io/slca/reference/slca.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Structural Latent Class Model — slca","title":"Construct Structural Latent Class Model — slca","text":"Constructs latent structure multiple latent class variables.","code":""},{"path":"https://kim0sun.github.io/slca/reference/slca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Structural Latent Class Model — slca","text":"","code":"slca(formula = NULL, ..., constraints = NULL)"},{"path":"https://kim0sun.github.io/slca/reference/slca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Structural Latent Class Model — slca","text":"formula formula specifying latent structure. Detailed model specifications provided 'Details'. ... additional formulae defining model structure. constraints list constraints enforce measurement invariance. Detailed explanations applying constraints available 'Details'.","code":""},{"path":"https://kim0sun.github.io/slca/reference/slca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Structural Latent Class Model — slca","text":"object class slca following components: tree data.frame describing parent-child relationships among latent class manifest variables. latent data.frame listing latent class variables details number classes. measure data.frame describing measurement model. struct data.frame detailing structural model. printed model description divided four parts: Latent variables: Lists latent class variables number classes variable. root variable marked asterisk (*). Measurement model: Displays manifest indicators latent class variable applied measurement constraints (lowercase letters indicate consistency). Structural model: Describes conditional relationships latent class variables. Dependency constraints: Outlines constraints applied conditional dependencies, uppercase letters represent consistent dependency structures.","code":""},{"path":"https://kim0sun.github.io/slca/reference/slca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Structural Latent Class Model — slca","text":"formula can categorized three types, serving distinct purpose: Defining Latent Class Variables Manifest Indicators: Specify relationship latent class variable manifest indicators. latent class variable left-hand side (lhs), denoted square brackets [] parentheses () indicate number classes, manifest indicators listed right-hand side (rhs). example: , k denotes number latent classes variable. Relating Latent Class Variables : Define relationships one latent class variable influences another. example: formula implies LC2 conditionally dependent LC1. Defining Higher-Level Latent Class Variables: Specify relationships latent class variable measured latent class variables instead manifest indicators. example: indicates latent variable P measured latent class variables LC1, LC2, LC3. formulas, variables lhs influence rhs. constraints argument enforces specific conditions ensure precise inference, measurement invariance. particularly useful longitudinal analysis (eg. LTA LCPA), consistent meanings latent classes across time essential. Measurement Invariance Measurement Model: Ensures probabilities associated latent class variables remain consistent. example: ensures LC1, LC2, LC3 semantically consistent measurement probabilities. ' 2. Measurement Invariance Structural Model: Applies constraints ensure consistent interpretations transition probabilities latent class variables. example: ensures transitions P LC1 P LC2 consistent.","code":"LC1[k] ~ x1 + x2 + x3 LC2[k] ~ y1 + y2 + y3 LC3(k) ~ z1 + z2 + z3 LC2 ~ LC1 P[k] ~ LC1 + LC2 + LC3 c(\"LC1\", \"LC2\", \"LC3\") c(\"P ~ LC1\", \"P -> LC2\")"},{"path":"https://kim0sun.github.io/slca/reference/slca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Structural Latent Class Model — slca","text":"","code":"# Standard LCA slca(lc[3] ~ y1 + y2 + y3 + y4) #> Structural Latent Variable Model #>  #> Latent variables (Root*):            #>  Label: lc* #> nclass: 3   #>  #> Measurement model:                             #>  lc -> { y1, y2, y3, y4 }  a # Latent transition analysis (LTA) slca(lx[3] ~ x1 + x2 + x3 + x4,      ly[2] ~ y1 + y2 + y3 + y4,      lx ~ ly) #> Structural Latent Variable Model #>  #> Latent variables (Root*):               #>  Label: lx* ly #> nclass: 3   2  #>  #> Measurement model:                             #>  lx -> { x1, x2, x3, x4 }  a #>  ly -> { y1, y2, y3, y4 }  b #>  #> Structural model:              #>  lx -> { ly } #>  #> Dependency constraints: #>  A        #>  lx -> ly # LTA with measurement invariance slca(l1[3] ~ y11 + y21 + y31 + y41,      l2[3] ~ y12 + y22 + y32 + y42,      l1 ~ l2, constraints = c(\"l1\", \"l2\")) #> Structural Latent Variable Model #>  #> Latent variables (Root*):               #>  Label: l1* l2 #> nclass: 3   3  #>  #> Measurement model:                                 #>  l1 -> { y11, y21, y31, y41 }  a #>  l2 -> { y12, y22, y32, y42 }  a #>  #> Structural model:              #>  l1 -> { l2 } #>  #> Dependency constraints: #>  A        #>  l1 -> l2 # Joint latent class analysis slca(lx[2] ~ x1 + x2 + x3 + x4,      ly[3] ~ y1 + y2 + y3 + y4,      lz[2] ~ z1 + z2 + z3 + z4,      jc[3] ~ lx + ly + lz) #> Structural Latent Variable Model #>  #> Latent variables (Root*):                     #>  Label: lx ly lz jc* #> nclass: 2  3  2  3   #>  #> Measurement model:                             #>  lx -> { x1, x2, x3, x4 }  a #>  ly -> { y1, y2, y3, y4 }  b #>  lz -> { z1, z2, z3, z4 }  c #>  #> Structural model:                      #>  jc -> { lx, ly, lz } #>  #> Dependency constraints: #>  A        B        C        #>  jc -> lx jc -> ly jc -> lz # Latent class profile analysis (with measurement invariance) slca(l1[3] ~ x1 + x2 + x3 + x4,      l2[3] ~ y1 + y2 + y3 + y4,      l3[3] ~ z1 + z2 + z3 + z4,      pf[4] ~ l1 + l2 + l3,      constraints = c(\"l1\", \"l2\", \"l3\")) #> Structural Latent Variable Model #>  #> Latent variables (Root*):                     #>  Label: l1 l2 l3 pf* #> nclass: 3  3  3  4   #>  #> Measurement model:                             #>  l1 -> { x1, x2, x3, x4 }  a #>  l2 -> { y1, y2, y3, y4 }  a #>  l3 -> { z1, z2, z3, z4 }  a #>  #> Structural model:                      #>  pf -> { l1, l2, l3 } #>  #> Dependency constraints: #>  A        B        C        #>  pf -> l1 pf -> l2 pf -> l3"},{"path":"https://kim0sun.github.io/slca/reference/slcaControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Parameters for slca Estimation — slcaControl","title":"Control Parameters for slca Estimation — slcaControl","text":"Specifies control parameters estimating slca model.","code":""},{"path":"https://kim0sun.github.io/slca/reference/slcaControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Parameters for slca Estimation — slcaControl","text":"","code":"slcaControl(   em.iterlim = 5000,   em.tol = 1e-08,   nlm.iterlim = 1000,   nlm.tol = 1e-10,   init.param = NULL,   nrep = 1,   test.iter = 500,   na.rm = FALSE,   verbose = FALSE )"},{"path":"https://kim0sun.github.io/slca/reference/slcaControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Parameters for slca Estimation — slcaControl","text":"em.iterlim integer specifying maximum number iterations allowed EM algorithm. default 5000. em.tol numeric value setting tolerance convergence EM algorithm. default 1e-8. nlm.iterlim integer specifying maximum number iterations allowed using nlm function estimation. default 1000. nlm.tol numeric value setting tolerance convergence nlm function. default 1e-10. init.param numeric vector specifying initial parameter values estimation. nrep integer specifying number estimation trials. default 1. test.iter integer specifying maximum number iterations allowed parameter testing. default 500. na.rm logical value indicating whether remove observations containing missing values (NA). default FALSE. verbose logical value indicating whether display progress updates estimation process. default FALSE. list containing control parameters slca estimation, including specified iteration limits, tolerances, additional options.","code":""},{"path":[]}]
